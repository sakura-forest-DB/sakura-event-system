
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.VolunteerScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  orgName: 'orgName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  skills: 'skills',
  interests: 'interests',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  date: 'date',
  applicationStartDate: 'applicationStartDate',
  location: 'location',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.SignupScalarFieldEnum = {
  id: 'id',
  volunteerId: 'volunteerId',
  eventId: 'eventId',
  role: 'role',
  detailsJson: 'detailsJson',
  availability: 'availability',
  freq: 'freq',
  status: 'status',
  memo: 'memo',
  createdAt: 'createdAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  kind: 'kind'
};

exports.Prisma.VolunteerTagScalarFieldEnum = {
  volunteerId: 'volunteerId',
  tagId: 'tagId'
};

exports.Prisma.StallApplicationScalarFieldEnum = {
  id: 'id',
  groupName: 'groupName',
  representative: 'representative',
  address: 'address',
  email: 'email',
  phone: 'phone',
  boothType: 'boothType',
  items: 'items',
  priceRangeMin: 'priceRangeMin',
  priceRangeMax: 'priceRangeMax',
  boothCount: 'boothCount',
  tentWidth: 'tentWidth',
  tentDepth: 'tentDepth',
  tentHeight: 'tentHeight',
  vehicleCount: 'vehicleCount',
  vehicleType: 'vehicleType',
  vehicleNumbers: 'vehicleNumbers',
  rentalTables: 'rentalTables',
  rentalChairs: 'rentalChairs',
  questions: 'questions',
  eventId: 'eventId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  privacyConsent: 'privacyConsent',
  marketingConsent: 'marketingConsent',
  originalPayload: 'originalPayload',
  originalSubmittedAt: 'originalSubmittedAt'
};

exports.Prisma.PerformerApplicationScalarFieldEnum = {
  id: 'id',
  groupName: 'groupName',
  representative: 'representative',
  address: 'address',
  email: 'email',
  phone: 'phone',
  performance: 'performance',
  performerCount: 'performerCount',
  slotCount: 'slotCount',
  vehicleCount: 'vehicleCount',
  vehicleNumbers: 'vehicleNumbers',
  audioSourceOnly: 'audioSourceOnly',
  rentalAmp: 'rentalAmp',
  rentalMic: 'rentalMic',
  questions: 'questions',
  eventId: 'eventId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  privacyConsent: 'privacyConsent',
  marketingConsent: 'marketingConsent',
  originalPayload: 'originalPayload',
  originalSubmittedAt: 'originalSubmittedAt'
};

exports.Prisma.ApplicationNoteScalarFieldEnum = {
  id: 'id',
  content: 'content',
  adminName: 'adminName',
  createdAt: 'createdAt',
  stallApplicationId: 'stallApplicationId',
  performerApplicationId: 'performerApplicationId'
};

exports.Prisma.ChangeLogScalarFieldEnum = {
  id: 'id',
  entity: 'entity',
  entityId: 'entityId',
  field: 'field',
  oldValue: 'oldValue',
  newValue: 'newValue',
  reason: 'reason',
  editor: 'editor',
  createdAt: 'createdAt',
  stallApplicationId: 'stallApplicationId',
  performerApplicationId: 'performerApplicationId',
  volunteerId: 'volunteerId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Volunteer: 'Volunteer',
  Event: 'Event',
  Signup: 'Signup',
  Tag: 'Tag',
  VolunteerTag: 'VolunteerTag',
  StallApplication: 'StallApplication',
  PerformerApplication: 'PerformerApplication',
  ApplicationNote: 'ApplicationNote',
  ChangeLog: 'ChangeLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
