// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Volunteer {
  id        String   @id @default(cuid())
  type      String // "individual" or "org"
  name      String
  orgName   String?
  email     String
  phone     String?
  address   String?
  skills    String // JSON array as string
  interests String // JSON array as string
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  signups       Signup[]
  volunteerTags VolunteerTag[]
  changeLogs    ChangeLog[]

  @@unique([email, name])
  @@map("volunteers")
}

model Event {
  id                   String    @id @default(cuid())
  title                String
  slug                 String    @unique
  date                 DateTime
  applicationStartDate DateTime?
  location             String
  description          String
  isPublic             Boolean   @default(true)
  status               String    @default("OPEN")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  signups               Signup[]
  stallApplications     StallApplication[]
  performerApplications PerformerApplication[]

  @@map("events")
}

model Signup {
  id           String   @id @default(cuid())
  volunteerId  String
  eventId      String
  role         String // "保全", "出演", "出店", "運営"
  detailsJson  String // JSON string with role-specific details
  availability String?
  freq         String // "monthly", "weekly", "ad-hoc"
  status       String   @default("applied") // "applied", "accepted", "declined"
  memo         String?
  createdAt    DateTime @default(now())

  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("signups")
}

model Tag {
  id   String @id @default(cuid())
  name String @unique
  kind String // category of tag

  volunteerTags VolunteerTag[]

  @@map("tags")
}

model VolunteerTag {
  volunteerId String
  tagId       String

  volunteer Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([volunteerId, tagId])
  @@map("volunteer_tags")
}

model StallApplication {
  id             String   @id @default(cuid())
  groupName      String // 参加団体名
  representative String // 代表者名
  address        String?
  email          String
  phone          String
  boothType      String // "飲食" | "物販"
  items          String? // 販売品目
  priceRangeMin  Int?
  priceRangeMax  Int?
  boothCount     Int? // 希望出店枠数
  tentWidth      Float?
  tentDepth      Float?
  tentHeight     Float?
  vehicleCount   Int? // 搬入・搬出車両台数
  vehicleType    String? // 車両種別（キッチンカー or 搬入・搬出車）
  vehicleNumbers String? // 車両ナンバー（複数台の場合はカンマ区切り）
  rentalTables   Int? // レンタル什器（テーブル）
  rentalChairs   Int? // レンタル什器（椅子）
  questions      String? // 連絡事項
  eventId        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  // 個人情報同意
  privacyConsent   Boolean @default(false) // 運営利用同意（必須）
  marketingConsent Boolean @default(false) // マーケティング利用同意（任意）

  // 監査ログ用フィールド
  originalPayload     String? // 初回申込時のJSONスナップショット
  originalSubmittedAt DateTime? // 初回申込日時

  event      Event?      @relation(fields: [eventId], references: [id], onDelete: SetNull)
  changeLogs ChangeLog[]

  @@map("stall_applications")
}

model PerformerApplication {
  id              String   @id @default(cuid())
  groupName       String // 参加団体名
  representative  String // 代表者名
  address         String?
  email           String
  phone           String
  performance     String // 出演内容
  performerCount  Int?
  slotCount       Int? // 希望出演枠数
  vehicleCount    Int? // 搬入・搬出車両台数
  vehicleNumbers  String? // 車両ナンバー（複数台の場合はカンマ区切り）
  audioSourceOnly Int? // 音源再生利用枠数
  rentalAmp       Int? // 音源拡声装置+マイク1本セットの希望数
  rentalMic       Int? // 追加マイク本数
  questions       String? // 連絡事項
  eventId         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  // 個人情報同意
  privacyConsent   Boolean @default(false) // 運営利用同意（必須）
  marketingConsent Boolean @default(false) // マーケティング利用同意（任意）

  // 監査ログ用フィールド
  originalPayload     String? // 初回申込時のJSONスナップショット
  originalSubmittedAt DateTime? // 初回申込日時

  event      Event?      @relation(fields: [eventId], references: [id], onDelete: SetNull)
  changeLogs ChangeLog[]

  @@map("performer_applications")
}

// 変更履歴テーブル
model ChangeLog {
  id        Int      @id @default(autoincrement())
  entity    String // "StallApplication" | "PerformerApplication" | "Volunteer"
  entityId  String // 対象データのID
  field     String // 変更されたフィールド名
  oldValue  String? // 変更前の値
  newValue  String? // 変更後の値
  reason    String // 変更理由
  editor    String // 編集者名
  createdAt DateTime @default(now())

  // 明示的な外部キーフィールド
  stallApplicationId     String?
  performerApplicationId String?
  volunteerId            String?

  // リレーション
  stallApplication     StallApplication?     @relation(fields: [stallApplicationId], references: [id], onDelete: Cascade)
  performerApplication PerformerApplication? @relation(fields: [performerApplicationId], references: [id], onDelete: Cascade)
  volunteer            Volunteer?            @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  @@index([entity, entityId, createdAt])
  @@map("change_logs")
}
