
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Volunteer
 * 
 */
export type Volunteer = $Result.DefaultSelection<Prisma.$VolunteerPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Signup
 * 
 */
export type Signup = $Result.DefaultSelection<Prisma.$SignupPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model VolunteerTag
 * 
 */
export type VolunteerTag = $Result.DefaultSelection<Prisma.$VolunteerTagPayload>
/**
 * Model StallApplication
 * 
 */
export type StallApplication = $Result.DefaultSelection<Prisma.$StallApplicationPayload>
/**
 * Model PerformerApplication
 * 
 */
export type PerformerApplication = $Result.DefaultSelection<Prisma.$PerformerApplicationPayload>
/**
 * Model ApplicationNote
 * 
 */
export type ApplicationNote = $Result.DefaultSelection<Prisma.$ApplicationNotePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Volunteers
 * const volunteers = await prisma.volunteer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Volunteers
   * const volunteers = await prisma.volunteer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.volunteer`: Exposes CRUD operations for the **Volunteer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Volunteers
    * const volunteers = await prisma.volunteer.findMany()
    * ```
    */
  get volunteer(): Prisma.VolunteerDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.signup`: Exposes CRUD operations for the **Signup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Signups
    * const signups = await prisma.signup.findMany()
    * ```
    */
  get signup(): Prisma.SignupDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.volunteerTag`: Exposes CRUD operations for the **VolunteerTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VolunteerTags
    * const volunteerTags = await prisma.volunteerTag.findMany()
    * ```
    */
  get volunteerTag(): Prisma.VolunteerTagDelegate<ExtArgs>;

  /**
   * `prisma.stallApplication`: Exposes CRUD operations for the **StallApplication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StallApplications
    * const stallApplications = await prisma.stallApplication.findMany()
    * ```
    */
  get stallApplication(): Prisma.StallApplicationDelegate<ExtArgs>;

  /**
   * `prisma.performerApplication`: Exposes CRUD operations for the **PerformerApplication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PerformerApplications
    * const performerApplications = await prisma.performerApplication.findMany()
    * ```
    */
  get performerApplication(): Prisma.PerformerApplicationDelegate<ExtArgs>;

  /**
   * `prisma.applicationNote`: Exposes CRUD operations for the **ApplicationNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicationNotes
    * const applicationNotes = await prisma.applicationNote.findMany()
    * ```
    */
  get applicationNote(): Prisma.ApplicationNoteDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Volunteer: 'Volunteer',
    Event: 'Event',
    Signup: 'Signup',
    Tag: 'Tag',
    VolunteerTag: 'VolunteerTag',
    StallApplication: 'StallApplication',
    PerformerApplication: 'PerformerApplication',
    ApplicationNote: 'ApplicationNote'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "volunteer" | "event" | "signup" | "tag" | "volunteerTag" | "stallApplication" | "performerApplication" | "applicationNote"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Volunteer: {
        payload: Prisma.$VolunteerPayload<ExtArgs>
        fields: Prisma.VolunteerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VolunteerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VolunteerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload>
          }
          findFirst: {
            args: Prisma.VolunteerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VolunteerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload>
          }
          findMany: {
            args: Prisma.VolunteerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload>[]
          }
          create: {
            args: Prisma.VolunteerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload>
          }
          createMany: {
            args: Prisma.VolunteerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VolunteerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload>[]
          }
          delete: {
            args: Prisma.VolunteerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload>
          }
          update: {
            args: Prisma.VolunteerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload>
          }
          deleteMany: {
            args: Prisma.VolunteerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VolunteerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VolunteerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerPayload>
          }
          aggregate: {
            args: Prisma.VolunteerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVolunteer>
          }
          groupBy: {
            args: Prisma.VolunteerGroupByArgs<ExtArgs>
            result: $Utils.Optional<VolunteerGroupByOutputType>[]
          }
          count: {
            args: Prisma.VolunteerCountArgs<ExtArgs>
            result: $Utils.Optional<VolunteerCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Signup: {
        payload: Prisma.$SignupPayload<ExtArgs>
        fields: Prisma.SignupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SignupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SignupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload>
          }
          findFirst: {
            args: Prisma.SignupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SignupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload>
          }
          findMany: {
            args: Prisma.SignupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload>[]
          }
          create: {
            args: Prisma.SignupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload>
          }
          createMany: {
            args: Prisma.SignupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SignupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload>[]
          }
          delete: {
            args: Prisma.SignupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload>
          }
          update: {
            args: Prisma.SignupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload>
          }
          deleteMany: {
            args: Prisma.SignupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SignupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SignupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignupPayload>
          }
          aggregate: {
            args: Prisma.SignupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSignup>
          }
          groupBy: {
            args: Prisma.SignupGroupByArgs<ExtArgs>
            result: $Utils.Optional<SignupGroupByOutputType>[]
          }
          count: {
            args: Prisma.SignupCountArgs<ExtArgs>
            result: $Utils.Optional<SignupCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      VolunteerTag: {
        payload: Prisma.$VolunteerTagPayload<ExtArgs>
        fields: Prisma.VolunteerTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VolunteerTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VolunteerTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload>
          }
          findFirst: {
            args: Prisma.VolunteerTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VolunteerTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload>
          }
          findMany: {
            args: Prisma.VolunteerTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload>[]
          }
          create: {
            args: Prisma.VolunteerTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload>
          }
          createMany: {
            args: Prisma.VolunteerTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VolunteerTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload>[]
          }
          delete: {
            args: Prisma.VolunteerTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload>
          }
          update: {
            args: Prisma.VolunteerTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload>
          }
          deleteMany: {
            args: Prisma.VolunteerTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VolunteerTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VolunteerTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolunteerTagPayload>
          }
          aggregate: {
            args: Prisma.VolunteerTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVolunteerTag>
          }
          groupBy: {
            args: Prisma.VolunteerTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<VolunteerTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.VolunteerTagCountArgs<ExtArgs>
            result: $Utils.Optional<VolunteerTagCountAggregateOutputType> | number
          }
        }
      }
      StallApplication: {
        payload: Prisma.$StallApplicationPayload<ExtArgs>
        fields: Prisma.StallApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StallApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StallApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload>
          }
          findFirst: {
            args: Prisma.StallApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StallApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload>
          }
          findMany: {
            args: Prisma.StallApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload>[]
          }
          create: {
            args: Prisma.StallApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload>
          }
          createMany: {
            args: Prisma.StallApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StallApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload>[]
          }
          delete: {
            args: Prisma.StallApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload>
          }
          update: {
            args: Prisma.StallApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload>
          }
          deleteMany: {
            args: Prisma.StallApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StallApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StallApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StallApplicationPayload>
          }
          aggregate: {
            args: Prisma.StallApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStallApplication>
          }
          groupBy: {
            args: Prisma.StallApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<StallApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.StallApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<StallApplicationCountAggregateOutputType> | number
          }
        }
      }
      PerformerApplication: {
        payload: Prisma.$PerformerApplicationPayload<ExtArgs>
        fields: Prisma.PerformerApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PerformerApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PerformerApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload>
          }
          findFirst: {
            args: Prisma.PerformerApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PerformerApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload>
          }
          findMany: {
            args: Prisma.PerformerApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload>[]
          }
          create: {
            args: Prisma.PerformerApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload>
          }
          createMany: {
            args: Prisma.PerformerApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PerformerApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload>[]
          }
          delete: {
            args: Prisma.PerformerApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload>
          }
          update: {
            args: Prisma.PerformerApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload>
          }
          deleteMany: {
            args: Prisma.PerformerApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PerformerApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PerformerApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PerformerApplicationPayload>
          }
          aggregate: {
            args: Prisma.PerformerApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerformerApplication>
          }
          groupBy: {
            args: Prisma.PerformerApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PerformerApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PerformerApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<PerformerApplicationCountAggregateOutputType> | number
          }
        }
      }
      ApplicationNote: {
        payload: Prisma.$ApplicationNotePayload<ExtArgs>
        fields: Prisma.ApplicationNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload>
          }
          findFirst: {
            args: Prisma.ApplicationNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload>
          }
          findMany: {
            args: Prisma.ApplicationNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload>[]
          }
          create: {
            args: Prisma.ApplicationNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload>
          }
          createMany: {
            args: Prisma.ApplicationNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload>[]
          }
          delete: {
            args: Prisma.ApplicationNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload>
          }
          update: {
            args: Prisma.ApplicationNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload>
          }
          deleteMany: {
            args: Prisma.ApplicationNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApplicationNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationNotePayload>
          }
          aggregate: {
            args: Prisma.ApplicationNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicationNote>
          }
          groupBy: {
            args: Prisma.ApplicationNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationNoteCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationNoteCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type VolunteerCountOutputType
   */

  export type VolunteerCountOutputType = {
    signups: number
    volunteerTags: number
  }

  export type VolunteerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    signups?: boolean | VolunteerCountOutputTypeCountSignupsArgs
    volunteerTags?: boolean | VolunteerCountOutputTypeCountVolunteerTagsArgs
  }

  // Custom InputTypes
  /**
   * VolunteerCountOutputType without action
   */
  export type VolunteerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerCountOutputType
     */
    select?: VolunteerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VolunteerCountOutputType without action
   */
  export type VolunteerCountOutputTypeCountSignupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignupWhereInput
  }

  /**
   * VolunteerCountOutputType without action
   */
  export type VolunteerCountOutputTypeCountVolunteerTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerTagWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    signups: number
    stallApplications: number
    performerApplications: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    signups?: boolean | EventCountOutputTypeCountSignupsArgs
    stallApplications?: boolean | EventCountOutputTypeCountStallApplicationsArgs
    performerApplications?: boolean | EventCountOutputTypeCountPerformerApplicationsArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountSignupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignupWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountStallApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StallApplicationWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountPerformerApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformerApplicationWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    volunteerTags: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    volunteerTags?: boolean | TagCountOutputTypeCountVolunteerTagsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountVolunteerTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerTagWhereInput
  }


  /**
   * Count Type StallApplicationCountOutputType
   */

  export type StallApplicationCountOutputType = {
    adminNotes: number
  }

  export type StallApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminNotes?: boolean | StallApplicationCountOutputTypeCountAdminNotesArgs
  }

  // Custom InputTypes
  /**
   * StallApplicationCountOutputType without action
   */
  export type StallApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplicationCountOutputType
     */
    select?: StallApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StallApplicationCountOutputType without action
   */
  export type StallApplicationCountOutputTypeCountAdminNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationNoteWhereInput
  }


  /**
   * Count Type PerformerApplicationCountOutputType
   */

  export type PerformerApplicationCountOutputType = {
    adminNotes: number
  }

  export type PerformerApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adminNotes?: boolean | PerformerApplicationCountOutputTypeCountAdminNotesArgs
  }

  // Custom InputTypes
  /**
   * PerformerApplicationCountOutputType without action
   */
  export type PerformerApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplicationCountOutputType
     */
    select?: PerformerApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PerformerApplicationCountOutputType without action
   */
  export type PerformerApplicationCountOutputTypeCountAdminNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationNoteWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Volunteer
   */

  export type AggregateVolunteer = {
    _count: VolunteerCountAggregateOutputType | null
    _min: VolunteerMinAggregateOutputType | null
    _max: VolunteerMaxAggregateOutputType | null
  }

  export type VolunteerMinAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    orgName: string | null
    email: string | null
    phone: string | null
    address: string | null
    skills: string | null
    interests: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type VolunteerMaxAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    orgName: string | null
    email: string | null
    phone: string | null
    address: string | null
    skills: string | null
    interests: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type VolunteerCountAggregateOutputType = {
    id: number
    type: number
    name: number
    orgName: number
    email: number
    phone: number
    address: number
    skills: number
    interests: number
    notes: number
    createdAt: number
    _all: number
  }


  export type VolunteerMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    orgName?: true
    email?: true
    phone?: true
    address?: true
    skills?: true
    interests?: true
    notes?: true
    createdAt?: true
  }

  export type VolunteerMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    orgName?: true
    email?: true
    phone?: true
    address?: true
    skills?: true
    interests?: true
    notes?: true
    createdAt?: true
  }

  export type VolunteerCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    orgName?: true
    email?: true
    phone?: true
    address?: true
    skills?: true
    interests?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type VolunteerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Volunteer to aggregate.
     */
    where?: VolunteerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Volunteers to fetch.
     */
    orderBy?: VolunteerOrderByWithRelationInput | VolunteerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VolunteerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Volunteers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Volunteers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Volunteers
    **/
    _count?: true | VolunteerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VolunteerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VolunteerMaxAggregateInputType
  }

  export type GetVolunteerAggregateType<T extends VolunteerAggregateArgs> = {
        [P in keyof T & keyof AggregateVolunteer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVolunteer[P]>
      : GetScalarType<T[P], AggregateVolunteer[P]>
  }




  export type VolunteerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerWhereInput
    orderBy?: VolunteerOrderByWithAggregationInput | VolunteerOrderByWithAggregationInput[]
    by: VolunteerScalarFieldEnum[] | VolunteerScalarFieldEnum
    having?: VolunteerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VolunteerCountAggregateInputType | true
    _min?: VolunteerMinAggregateInputType
    _max?: VolunteerMaxAggregateInputType
  }

  export type VolunteerGroupByOutputType = {
    id: string
    type: string
    name: string
    orgName: string | null
    email: string
    phone: string | null
    address: string | null
    skills: string
    interests: string
    notes: string | null
    createdAt: Date
    _count: VolunteerCountAggregateOutputType | null
    _min: VolunteerMinAggregateOutputType | null
    _max: VolunteerMaxAggregateOutputType | null
  }

  type GetVolunteerGroupByPayload<T extends VolunteerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VolunteerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VolunteerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VolunteerGroupByOutputType[P]>
            : GetScalarType<T[P], VolunteerGroupByOutputType[P]>
        }
      >
    >


  export type VolunteerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    orgName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    skills?: boolean
    interests?: boolean
    notes?: boolean
    createdAt?: boolean
    signups?: boolean | Volunteer$signupsArgs<ExtArgs>
    volunteerTags?: boolean | Volunteer$volunteerTagsArgs<ExtArgs>
    _count?: boolean | VolunteerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteer"]>

  export type VolunteerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    orgName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    skills?: boolean
    interests?: boolean
    notes?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["volunteer"]>

  export type VolunteerSelectScalar = {
    id?: boolean
    type?: boolean
    name?: boolean
    orgName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    skills?: boolean
    interests?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type VolunteerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    signups?: boolean | Volunteer$signupsArgs<ExtArgs>
    volunteerTags?: boolean | Volunteer$volunteerTagsArgs<ExtArgs>
    _count?: boolean | VolunteerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VolunteerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VolunteerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Volunteer"
    objects: {
      signups: Prisma.$SignupPayload<ExtArgs>[]
      volunteerTags: Prisma.$VolunteerTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      name: string
      orgName: string | null
      email: string
      phone: string | null
      address: string | null
      skills: string
      interests: string
      notes: string | null
      createdAt: Date
    }, ExtArgs["result"]["volunteer"]>
    composites: {}
  }

  type VolunteerGetPayload<S extends boolean | null | undefined | VolunteerDefaultArgs> = $Result.GetResult<Prisma.$VolunteerPayload, S>

  type VolunteerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VolunteerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VolunteerCountAggregateInputType | true
    }

  export interface VolunteerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Volunteer'], meta: { name: 'Volunteer' } }
    /**
     * Find zero or one Volunteer that matches the filter.
     * @param {VolunteerFindUniqueArgs} args - Arguments to find a Volunteer
     * @example
     * // Get one Volunteer
     * const volunteer = await prisma.volunteer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VolunteerFindUniqueArgs>(args: SelectSubset<T, VolunteerFindUniqueArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Volunteer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VolunteerFindUniqueOrThrowArgs} args - Arguments to find a Volunteer
     * @example
     * // Get one Volunteer
     * const volunteer = await prisma.volunteer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VolunteerFindUniqueOrThrowArgs>(args: SelectSubset<T, VolunteerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Volunteer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerFindFirstArgs} args - Arguments to find a Volunteer
     * @example
     * // Get one Volunteer
     * const volunteer = await prisma.volunteer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VolunteerFindFirstArgs>(args?: SelectSubset<T, VolunteerFindFirstArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Volunteer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerFindFirstOrThrowArgs} args - Arguments to find a Volunteer
     * @example
     * // Get one Volunteer
     * const volunteer = await prisma.volunteer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VolunteerFindFirstOrThrowArgs>(args?: SelectSubset<T, VolunteerFindFirstOrThrowArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Volunteers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Volunteers
     * const volunteers = await prisma.volunteer.findMany()
     * 
     * // Get first 10 Volunteers
     * const volunteers = await prisma.volunteer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const volunteerWithIdOnly = await prisma.volunteer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VolunteerFindManyArgs>(args?: SelectSubset<T, VolunteerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Volunteer.
     * @param {VolunteerCreateArgs} args - Arguments to create a Volunteer.
     * @example
     * // Create one Volunteer
     * const Volunteer = await prisma.volunteer.create({
     *   data: {
     *     // ... data to create a Volunteer
     *   }
     * })
     * 
     */
    create<T extends VolunteerCreateArgs>(args: SelectSubset<T, VolunteerCreateArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Volunteers.
     * @param {VolunteerCreateManyArgs} args - Arguments to create many Volunteers.
     * @example
     * // Create many Volunteers
     * const volunteer = await prisma.volunteer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VolunteerCreateManyArgs>(args?: SelectSubset<T, VolunteerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Volunteers and returns the data saved in the database.
     * @param {VolunteerCreateManyAndReturnArgs} args - Arguments to create many Volunteers.
     * @example
     * // Create many Volunteers
     * const volunteer = await prisma.volunteer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Volunteers and only return the `id`
     * const volunteerWithIdOnly = await prisma.volunteer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VolunteerCreateManyAndReturnArgs>(args?: SelectSubset<T, VolunteerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Volunteer.
     * @param {VolunteerDeleteArgs} args - Arguments to delete one Volunteer.
     * @example
     * // Delete one Volunteer
     * const Volunteer = await prisma.volunteer.delete({
     *   where: {
     *     // ... filter to delete one Volunteer
     *   }
     * })
     * 
     */
    delete<T extends VolunteerDeleteArgs>(args: SelectSubset<T, VolunteerDeleteArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Volunteer.
     * @param {VolunteerUpdateArgs} args - Arguments to update one Volunteer.
     * @example
     * // Update one Volunteer
     * const volunteer = await prisma.volunteer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VolunteerUpdateArgs>(args: SelectSubset<T, VolunteerUpdateArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Volunteers.
     * @param {VolunteerDeleteManyArgs} args - Arguments to filter Volunteers to delete.
     * @example
     * // Delete a few Volunteers
     * const { count } = await prisma.volunteer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VolunteerDeleteManyArgs>(args?: SelectSubset<T, VolunteerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Volunteers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Volunteers
     * const volunteer = await prisma.volunteer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VolunteerUpdateManyArgs>(args: SelectSubset<T, VolunteerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Volunteer.
     * @param {VolunteerUpsertArgs} args - Arguments to update or create a Volunteer.
     * @example
     * // Update or create a Volunteer
     * const volunteer = await prisma.volunteer.upsert({
     *   create: {
     *     // ... data to create a Volunteer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Volunteer we want to update
     *   }
     * })
     */
    upsert<T extends VolunteerUpsertArgs>(args: SelectSubset<T, VolunteerUpsertArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Volunteers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerCountArgs} args - Arguments to filter Volunteers to count.
     * @example
     * // Count the number of Volunteers
     * const count = await prisma.volunteer.count({
     *   where: {
     *     // ... the filter for the Volunteers we want to count
     *   }
     * })
    **/
    count<T extends VolunteerCountArgs>(
      args?: Subset<T, VolunteerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VolunteerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Volunteer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VolunteerAggregateArgs>(args: Subset<T, VolunteerAggregateArgs>): Prisma.PrismaPromise<GetVolunteerAggregateType<T>>

    /**
     * Group by Volunteer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VolunteerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VolunteerGroupByArgs['orderBy'] }
        : { orderBy?: VolunteerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VolunteerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVolunteerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Volunteer model
   */
  readonly fields: VolunteerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Volunteer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VolunteerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    signups<T extends Volunteer$signupsArgs<ExtArgs> = {}>(args?: Subset<T, Volunteer$signupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "findMany"> | Null>
    volunteerTags<T extends Volunteer$volunteerTagsArgs<ExtArgs> = {}>(args?: Subset<T, Volunteer$volunteerTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Volunteer model
   */ 
  interface VolunteerFieldRefs {
    readonly id: FieldRef<"Volunteer", 'String'>
    readonly type: FieldRef<"Volunteer", 'String'>
    readonly name: FieldRef<"Volunteer", 'String'>
    readonly orgName: FieldRef<"Volunteer", 'String'>
    readonly email: FieldRef<"Volunteer", 'String'>
    readonly phone: FieldRef<"Volunteer", 'String'>
    readonly address: FieldRef<"Volunteer", 'String'>
    readonly skills: FieldRef<"Volunteer", 'String'>
    readonly interests: FieldRef<"Volunteer", 'String'>
    readonly notes: FieldRef<"Volunteer", 'String'>
    readonly createdAt: FieldRef<"Volunteer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Volunteer findUnique
   */
  export type VolunteerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * Filter, which Volunteer to fetch.
     */
    where: VolunteerWhereUniqueInput
  }

  /**
   * Volunteer findUniqueOrThrow
   */
  export type VolunteerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * Filter, which Volunteer to fetch.
     */
    where: VolunteerWhereUniqueInput
  }

  /**
   * Volunteer findFirst
   */
  export type VolunteerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * Filter, which Volunteer to fetch.
     */
    where?: VolunteerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Volunteers to fetch.
     */
    orderBy?: VolunteerOrderByWithRelationInput | VolunteerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Volunteers.
     */
    cursor?: VolunteerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Volunteers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Volunteers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Volunteers.
     */
    distinct?: VolunteerScalarFieldEnum | VolunteerScalarFieldEnum[]
  }

  /**
   * Volunteer findFirstOrThrow
   */
  export type VolunteerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * Filter, which Volunteer to fetch.
     */
    where?: VolunteerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Volunteers to fetch.
     */
    orderBy?: VolunteerOrderByWithRelationInput | VolunteerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Volunteers.
     */
    cursor?: VolunteerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Volunteers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Volunteers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Volunteers.
     */
    distinct?: VolunteerScalarFieldEnum | VolunteerScalarFieldEnum[]
  }

  /**
   * Volunteer findMany
   */
  export type VolunteerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * Filter, which Volunteers to fetch.
     */
    where?: VolunteerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Volunteers to fetch.
     */
    orderBy?: VolunteerOrderByWithRelationInput | VolunteerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Volunteers.
     */
    cursor?: VolunteerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Volunteers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Volunteers.
     */
    skip?: number
    distinct?: VolunteerScalarFieldEnum | VolunteerScalarFieldEnum[]
  }

  /**
   * Volunteer create
   */
  export type VolunteerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * The data needed to create a Volunteer.
     */
    data: XOR<VolunteerCreateInput, VolunteerUncheckedCreateInput>
  }

  /**
   * Volunteer createMany
   */
  export type VolunteerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Volunteers.
     */
    data: VolunteerCreateManyInput | VolunteerCreateManyInput[]
  }

  /**
   * Volunteer createManyAndReturn
   */
  export type VolunteerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Volunteers.
     */
    data: VolunteerCreateManyInput | VolunteerCreateManyInput[]
  }

  /**
   * Volunteer update
   */
  export type VolunteerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * The data needed to update a Volunteer.
     */
    data: XOR<VolunteerUpdateInput, VolunteerUncheckedUpdateInput>
    /**
     * Choose, which Volunteer to update.
     */
    where: VolunteerWhereUniqueInput
  }

  /**
   * Volunteer updateMany
   */
  export type VolunteerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Volunteers.
     */
    data: XOR<VolunteerUpdateManyMutationInput, VolunteerUncheckedUpdateManyInput>
    /**
     * Filter which Volunteers to update
     */
    where?: VolunteerWhereInput
  }

  /**
   * Volunteer upsert
   */
  export type VolunteerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * The filter to search for the Volunteer to update in case it exists.
     */
    where: VolunteerWhereUniqueInput
    /**
     * In case the Volunteer found by the `where` argument doesn't exist, create a new Volunteer with this data.
     */
    create: XOR<VolunteerCreateInput, VolunteerUncheckedCreateInput>
    /**
     * In case the Volunteer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VolunteerUpdateInput, VolunteerUncheckedUpdateInput>
  }

  /**
   * Volunteer delete
   */
  export type VolunteerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
    /**
     * Filter which Volunteer to delete.
     */
    where: VolunteerWhereUniqueInput
  }

  /**
   * Volunteer deleteMany
   */
  export type VolunteerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Volunteers to delete
     */
    where?: VolunteerWhereInput
  }

  /**
   * Volunteer.signups
   */
  export type Volunteer$signupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    where?: SignupWhereInput
    orderBy?: SignupOrderByWithRelationInput | SignupOrderByWithRelationInput[]
    cursor?: SignupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SignupScalarFieldEnum | SignupScalarFieldEnum[]
  }

  /**
   * Volunteer.volunteerTags
   */
  export type Volunteer$volunteerTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    where?: VolunteerTagWhereInput
    orderBy?: VolunteerTagOrderByWithRelationInput | VolunteerTagOrderByWithRelationInput[]
    cursor?: VolunteerTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VolunteerTagScalarFieldEnum | VolunteerTagScalarFieldEnum[]
  }

  /**
   * Volunteer without action
   */
  export type VolunteerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volunteer
     */
    select?: VolunteerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    date: Date | null
    applicationStartDate: Date | null
    location: string | null
    description: string | null
    createdAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    date: Date | null
    applicationStartDate: Date | null
    location: string | null
    description: string | null
    createdAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    date: number
    applicationStartDate: number
    location: number
    description: number
    createdAt: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    date?: true
    applicationStartDate?: true
    location?: true
    description?: true
    createdAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    date?: true
    applicationStartDate?: true
    location?: true
    description?: true
    createdAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    date?: true
    applicationStartDate?: true
    location?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    title: string
    slug: string
    date: Date
    applicationStartDate: Date | null
    location: string
    description: string
    createdAt: Date
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    date?: boolean
    applicationStartDate?: boolean
    location?: boolean
    description?: boolean
    createdAt?: boolean
    signups?: boolean | Event$signupsArgs<ExtArgs>
    stallApplications?: boolean | Event$stallApplicationsArgs<ExtArgs>
    performerApplications?: boolean | Event$performerApplicationsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    date?: boolean
    applicationStartDate?: boolean
    location?: boolean
    description?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    date?: boolean
    applicationStartDate?: boolean
    location?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    signups?: boolean | Event$signupsArgs<ExtArgs>
    stallApplications?: boolean | Event$stallApplicationsArgs<ExtArgs>
    performerApplications?: boolean | Event$performerApplicationsArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      signups: Prisma.$SignupPayload<ExtArgs>[]
      stallApplications: Prisma.$StallApplicationPayload<ExtArgs>[]
      performerApplications: Prisma.$PerformerApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      slug: string
      date: Date
      applicationStartDate: Date | null
      location: string
      description: string
      createdAt: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    signups<T extends Event$signupsArgs<ExtArgs> = {}>(args?: Subset<T, Event$signupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "findMany"> | Null>
    stallApplications<T extends Event$stallApplicationsArgs<ExtArgs> = {}>(args?: Subset<T, Event$stallApplicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "findMany"> | Null>
    performerApplications<T extends Event$performerApplicationsArgs<ExtArgs> = {}>(args?: Subset<T, Event$performerApplicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly slug: FieldRef<"Event", 'String'>
    readonly date: FieldRef<"Event", 'DateTime'>
    readonly applicationStartDate: FieldRef<"Event", 'DateTime'>
    readonly location: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.signups
   */
  export type Event$signupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    where?: SignupWhereInput
    orderBy?: SignupOrderByWithRelationInput | SignupOrderByWithRelationInput[]
    cursor?: SignupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SignupScalarFieldEnum | SignupScalarFieldEnum[]
  }

  /**
   * Event.stallApplications
   */
  export type Event$stallApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    where?: StallApplicationWhereInput
    orderBy?: StallApplicationOrderByWithRelationInput | StallApplicationOrderByWithRelationInput[]
    cursor?: StallApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StallApplicationScalarFieldEnum | StallApplicationScalarFieldEnum[]
  }

  /**
   * Event.performerApplications
   */
  export type Event$performerApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    where?: PerformerApplicationWhereInput
    orderBy?: PerformerApplicationOrderByWithRelationInput | PerformerApplicationOrderByWithRelationInput[]
    cursor?: PerformerApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PerformerApplicationScalarFieldEnum | PerformerApplicationScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Signup
   */

  export type AggregateSignup = {
    _count: SignupCountAggregateOutputType | null
    _min: SignupMinAggregateOutputType | null
    _max: SignupMaxAggregateOutputType | null
  }

  export type SignupMinAggregateOutputType = {
    id: string | null
    volunteerId: string | null
    eventId: string | null
    role: string | null
    detailsJson: string | null
    availability: string | null
    freq: string | null
    status: string | null
    memo: string | null
    createdAt: Date | null
  }

  export type SignupMaxAggregateOutputType = {
    id: string | null
    volunteerId: string | null
    eventId: string | null
    role: string | null
    detailsJson: string | null
    availability: string | null
    freq: string | null
    status: string | null
    memo: string | null
    createdAt: Date | null
  }

  export type SignupCountAggregateOutputType = {
    id: number
    volunteerId: number
    eventId: number
    role: number
    detailsJson: number
    availability: number
    freq: number
    status: number
    memo: number
    createdAt: number
    _all: number
  }


  export type SignupMinAggregateInputType = {
    id?: true
    volunteerId?: true
    eventId?: true
    role?: true
    detailsJson?: true
    availability?: true
    freq?: true
    status?: true
    memo?: true
    createdAt?: true
  }

  export type SignupMaxAggregateInputType = {
    id?: true
    volunteerId?: true
    eventId?: true
    role?: true
    detailsJson?: true
    availability?: true
    freq?: true
    status?: true
    memo?: true
    createdAt?: true
  }

  export type SignupCountAggregateInputType = {
    id?: true
    volunteerId?: true
    eventId?: true
    role?: true
    detailsJson?: true
    availability?: true
    freq?: true
    status?: true
    memo?: true
    createdAt?: true
    _all?: true
  }

  export type SignupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Signup to aggregate.
     */
    where?: SignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Signups to fetch.
     */
    orderBy?: SignupOrderByWithRelationInput | SignupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Signups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Signups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Signups
    **/
    _count?: true | SignupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SignupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SignupMaxAggregateInputType
  }

  export type GetSignupAggregateType<T extends SignupAggregateArgs> = {
        [P in keyof T & keyof AggregateSignup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSignup[P]>
      : GetScalarType<T[P], AggregateSignup[P]>
  }




  export type SignupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignupWhereInput
    orderBy?: SignupOrderByWithAggregationInput | SignupOrderByWithAggregationInput[]
    by: SignupScalarFieldEnum[] | SignupScalarFieldEnum
    having?: SignupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SignupCountAggregateInputType | true
    _min?: SignupMinAggregateInputType
    _max?: SignupMaxAggregateInputType
  }

  export type SignupGroupByOutputType = {
    id: string
    volunteerId: string
    eventId: string
    role: string
    detailsJson: string
    availability: string | null
    freq: string
    status: string
    memo: string | null
    createdAt: Date
    _count: SignupCountAggregateOutputType | null
    _min: SignupMinAggregateOutputType | null
    _max: SignupMaxAggregateOutputType | null
  }

  type GetSignupGroupByPayload<T extends SignupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SignupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SignupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SignupGroupByOutputType[P]>
            : GetScalarType<T[P], SignupGroupByOutputType[P]>
        }
      >
    >


  export type SignupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    volunteerId?: boolean
    eventId?: boolean
    role?: boolean
    detailsJson?: boolean
    availability?: boolean
    freq?: boolean
    status?: boolean
    memo?: boolean
    createdAt?: boolean
    volunteer?: boolean | VolunteerDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signup"]>

  export type SignupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    volunteerId?: boolean
    eventId?: boolean
    role?: boolean
    detailsJson?: boolean
    availability?: boolean
    freq?: boolean
    status?: boolean
    memo?: boolean
    createdAt?: boolean
    volunteer?: boolean | VolunteerDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signup"]>

  export type SignupSelectScalar = {
    id?: boolean
    volunteerId?: boolean
    eventId?: boolean
    role?: boolean
    detailsJson?: boolean
    availability?: boolean
    freq?: boolean
    status?: boolean
    memo?: boolean
    createdAt?: boolean
  }

  export type SignupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    volunteer?: boolean | VolunteerDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }
  export type SignupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    volunteer?: boolean | VolunteerDefaultArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $SignupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Signup"
    objects: {
      volunteer: Prisma.$VolunteerPayload<ExtArgs>
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      volunteerId: string
      eventId: string
      role: string
      detailsJson: string
      availability: string | null
      freq: string
      status: string
      memo: string | null
      createdAt: Date
    }, ExtArgs["result"]["signup"]>
    composites: {}
  }

  type SignupGetPayload<S extends boolean | null | undefined | SignupDefaultArgs> = $Result.GetResult<Prisma.$SignupPayload, S>

  type SignupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SignupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SignupCountAggregateInputType | true
    }

  export interface SignupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Signup'], meta: { name: 'Signup' } }
    /**
     * Find zero or one Signup that matches the filter.
     * @param {SignupFindUniqueArgs} args - Arguments to find a Signup
     * @example
     * // Get one Signup
     * const signup = await prisma.signup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SignupFindUniqueArgs>(args: SelectSubset<T, SignupFindUniqueArgs<ExtArgs>>): Prisma__SignupClient<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Signup that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SignupFindUniqueOrThrowArgs} args - Arguments to find a Signup
     * @example
     * // Get one Signup
     * const signup = await prisma.signup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SignupFindUniqueOrThrowArgs>(args: SelectSubset<T, SignupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SignupClient<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Signup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignupFindFirstArgs} args - Arguments to find a Signup
     * @example
     * // Get one Signup
     * const signup = await prisma.signup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SignupFindFirstArgs>(args?: SelectSubset<T, SignupFindFirstArgs<ExtArgs>>): Prisma__SignupClient<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Signup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignupFindFirstOrThrowArgs} args - Arguments to find a Signup
     * @example
     * // Get one Signup
     * const signup = await prisma.signup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SignupFindFirstOrThrowArgs>(args?: SelectSubset<T, SignupFindFirstOrThrowArgs<ExtArgs>>): Prisma__SignupClient<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Signups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Signups
     * const signups = await prisma.signup.findMany()
     * 
     * // Get first 10 Signups
     * const signups = await prisma.signup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const signupWithIdOnly = await prisma.signup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SignupFindManyArgs>(args?: SelectSubset<T, SignupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Signup.
     * @param {SignupCreateArgs} args - Arguments to create a Signup.
     * @example
     * // Create one Signup
     * const Signup = await prisma.signup.create({
     *   data: {
     *     // ... data to create a Signup
     *   }
     * })
     * 
     */
    create<T extends SignupCreateArgs>(args: SelectSubset<T, SignupCreateArgs<ExtArgs>>): Prisma__SignupClient<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Signups.
     * @param {SignupCreateManyArgs} args - Arguments to create many Signups.
     * @example
     * // Create many Signups
     * const signup = await prisma.signup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SignupCreateManyArgs>(args?: SelectSubset<T, SignupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Signups and returns the data saved in the database.
     * @param {SignupCreateManyAndReturnArgs} args - Arguments to create many Signups.
     * @example
     * // Create many Signups
     * const signup = await prisma.signup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Signups and only return the `id`
     * const signupWithIdOnly = await prisma.signup.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SignupCreateManyAndReturnArgs>(args?: SelectSubset<T, SignupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Signup.
     * @param {SignupDeleteArgs} args - Arguments to delete one Signup.
     * @example
     * // Delete one Signup
     * const Signup = await prisma.signup.delete({
     *   where: {
     *     // ... filter to delete one Signup
     *   }
     * })
     * 
     */
    delete<T extends SignupDeleteArgs>(args: SelectSubset<T, SignupDeleteArgs<ExtArgs>>): Prisma__SignupClient<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Signup.
     * @param {SignupUpdateArgs} args - Arguments to update one Signup.
     * @example
     * // Update one Signup
     * const signup = await prisma.signup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SignupUpdateArgs>(args: SelectSubset<T, SignupUpdateArgs<ExtArgs>>): Prisma__SignupClient<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Signups.
     * @param {SignupDeleteManyArgs} args - Arguments to filter Signups to delete.
     * @example
     * // Delete a few Signups
     * const { count } = await prisma.signup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SignupDeleteManyArgs>(args?: SelectSubset<T, SignupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Signups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Signups
     * const signup = await prisma.signup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SignupUpdateManyArgs>(args: SelectSubset<T, SignupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Signup.
     * @param {SignupUpsertArgs} args - Arguments to update or create a Signup.
     * @example
     * // Update or create a Signup
     * const signup = await prisma.signup.upsert({
     *   create: {
     *     // ... data to create a Signup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Signup we want to update
     *   }
     * })
     */
    upsert<T extends SignupUpsertArgs>(args: SelectSubset<T, SignupUpsertArgs<ExtArgs>>): Prisma__SignupClient<$Result.GetResult<Prisma.$SignupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Signups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignupCountArgs} args - Arguments to filter Signups to count.
     * @example
     * // Count the number of Signups
     * const count = await prisma.signup.count({
     *   where: {
     *     // ... the filter for the Signups we want to count
     *   }
     * })
    **/
    count<T extends SignupCountArgs>(
      args?: Subset<T, SignupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SignupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Signup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SignupAggregateArgs>(args: Subset<T, SignupAggregateArgs>): Prisma.PrismaPromise<GetSignupAggregateType<T>>

    /**
     * Group by Signup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SignupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SignupGroupByArgs['orderBy'] }
        : { orderBy?: SignupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SignupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSignupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Signup model
   */
  readonly fields: SignupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Signup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SignupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    volunteer<T extends VolunteerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VolunteerDefaultArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Signup model
   */ 
  interface SignupFieldRefs {
    readonly id: FieldRef<"Signup", 'String'>
    readonly volunteerId: FieldRef<"Signup", 'String'>
    readonly eventId: FieldRef<"Signup", 'String'>
    readonly role: FieldRef<"Signup", 'String'>
    readonly detailsJson: FieldRef<"Signup", 'String'>
    readonly availability: FieldRef<"Signup", 'String'>
    readonly freq: FieldRef<"Signup", 'String'>
    readonly status: FieldRef<"Signup", 'String'>
    readonly memo: FieldRef<"Signup", 'String'>
    readonly createdAt: FieldRef<"Signup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Signup findUnique
   */
  export type SignupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * Filter, which Signup to fetch.
     */
    where: SignupWhereUniqueInput
  }

  /**
   * Signup findUniqueOrThrow
   */
  export type SignupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * Filter, which Signup to fetch.
     */
    where: SignupWhereUniqueInput
  }

  /**
   * Signup findFirst
   */
  export type SignupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * Filter, which Signup to fetch.
     */
    where?: SignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Signups to fetch.
     */
    orderBy?: SignupOrderByWithRelationInput | SignupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Signups.
     */
    cursor?: SignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Signups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Signups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Signups.
     */
    distinct?: SignupScalarFieldEnum | SignupScalarFieldEnum[]
  }

  /**
   * Signup findFirstOrThrow
   */
  export type SignupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * Filter, which Signup to fetch.
     */
    where?: SignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Signups to fetch.
     */
    orderBy?: SignupOrderByWithRelationInput | SignupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Signups.
     */
    cursor?: SignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Signups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Signups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Signups.
     */
    distinct?: SignupScalarFieldEnum | SignupScalarFieldEnum[]
  }

  /**
   * Signup findMany
   */
  export type SignupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * Filter, which Signups to fetch.
     */
    where?: SignupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Signups to fetch.
     */
    orderBy?: SignupOrderByWithRelationInput | SignupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Signups.
     */
    cursor?: SignupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Signups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Signups.
     */
    skip?: number
    distinct?: SignupScalarFieldEnum | SignupScalarFieldEnum[]
  }

  /**
   * Signup create
   */
  export type SignupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * The data needed to create a Signup.
     */
    data: XOR<SignupCreateInput, SignupUncheckedCreateInput>
  }

  /**
   * Signup createMany
   */
  export type SignupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Signups.
     */
    data: SignupCreateManyInput | SignupCreateManyInput[]
  }

  /**
   * Signup createManyAndReturn
   */
  export type SignupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Signups.
     */
    data: SignupCreateManyInput | SignupCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Signup update
   */
  export type SignupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * The data needed to update a Signup.
     */
    data: XOR<SignupUpdateInput, SignupUncheckedUpdateInput>
    /**
     * Choose, which Signup to update.
     */
    where: SignupWhereUniqueInput
  }

  /**
   * Signup updateMany
   */
  export type SignupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Signups.
     */
    data: XOR<SignupUpdateManyMutationInput, SignupUncheckedUpdateManyInput>
    /**
     * Filter which Signups to update
     */
    where?: SignupWhereInput
  }

  /**
   * Signup upsert
   */
  export type SignupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * The filter to search for the Signup to update in case it exists.
     */
    where: SignupWhereUniqueInput
    /**
     * In case the Signup found by the `where` argument doesn't exist, create a new Signup with this data.
     */
    create: XOR<SignupCreateInput, SignupUncheckedCreateInput>
    /**
     * In case the Signup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SignupUpdateInput, SignupUncheckedUpdateInput>
  }

  /**
   * Signup delete
   */
  export type SignupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
    /**
     * Filter which Signup to delete.
     */
    where: SignupWhereUniqueInput
  }

  /**
   * Signup deleteMany
   */
  export type SignupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Signups to delete
     */
    where?: SignupWhereInput
  }

  /**
   * Signup without action
   */
  export type SignupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Signup
     */
    select?: SignupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignupInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    kind: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    kind: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    kind: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    kind?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    kind?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    kind?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    kind: string
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    kind?: boolean
    volunteerTags?: boolean | Tag$volunteerTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    kind?: boolean
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    kind?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    volunteerTags?: boolean | Tag$volunteerTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      volunteerTags: Prisma.$VolunteerTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      kind: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tags and returns the data saved in the database.
     * @param {TagCreateManyAndReturnArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tags and only return the `id`
     * const tagWithIdOnly = await prisma.tag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TagCreateManyAndReturnArgs>(args?: SelectSubset<T, TagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    volunteerTags<T extends Tag$volunteerTagsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$volunteerTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly kind: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
  }

  /**
   * Tag createManyAndReturn
   */
  export type TagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.volunteerTags
   */
  export type Tag$volunteerTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    where?: VolunteerTagWhereInput
    orderBy?: VolunteerTagOrderByWithRelationInput | VolunteerTagOrderByWithRelationInput[]
    cursor?: VolunteerTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VolunteerTagScalarFieldEnum | VolunteerTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model VolunteerTag
   */

  export type AggregateVolunteerTag = {
    _count: VolunteerTagCountAggregateOutputType | null
    _min: VolunteerTagMinAggregateOutputType | null
    _max: VolunteerTagMaxAggregateOutputType | null
  }

  export type VolunteerTagMinAggregateOutputType = {
    volunteerId: string | null
    tagId: string | null
  }

  export type VolunteerTagMaxAggregateOutputType = {
    volunteerId: string | null
    tagId: string | null
  }

  export type VolunteerTagCountAggregateOutputType = {
    volunteerId: number
    tagId: number
    _all: number
  }


  export type VolunteerTagMinAggregateInputType = {
    volunteerId?: true
    tagId?: true
  }

  export type VolunteerTagMaxAggregateInputType = {
    volunteerId?: true
    tagId?: true
  }

  export type VolunteerTagCountAggregateInputType = {
    volunteerId?: true
    tagId?: true
    _all?: true
  }

  export type VolunteerTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VolunteerTag to aggregate.
     */
    where?: VolunteerTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerTags to fetch.
     */
    orderBy?: VolunteerTagOrderByWithRelationInput | VolunteerTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VolunteerTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VolunteerTags
    **/
    _count?: true | VolunteerTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VolunteerTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VolunteerTagMaxAggregateInputType
  }

  export type GetVolunteerTagAggregateType<T extends VolunteerTagAggregateArgs> = {
        [P in keyof T & keyof AggregateVolunteerTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVolunteerTag[P]>
      : GetScalarType<T[P], AggregateVolunteerTag[P]>
  }




  export type VolunteerTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolunteerTagWhereInput
    orderBy?: VolunteerTagOrderByWithAggregationInput | VolunteerTagOrderByWithAggregationInput[]
    by: VolunteerTagScalarFieldEnum[] | VolunteerTagScalarFieldEnum
    having?: VolunteerTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VolunteerTagCountAggregateInputType | true
    _min?: VolunteerTagMinAggregateInputType
    _max?: VolunteerTagMaxAggregateInputType
  }

  export type VolunteerTagGroupByOutputType = {
    volunteerId: string
    tagId: string
    _count: VolunteerTagCountAggregateOutputType | null
    _min: VolunteerTagMinAggregateOutputType | null
    _max: VolunteerTagMaxAggregateOutputType | null
  }

  type GetVolunteerTagGroupByPayload<T extends VolunteerTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VolunteerTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VolunteerTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VolunteerTagGroupByOutputType[P]>
            : GetScalarType<T[P], VolunteerTagGroupByOutputType[P]>
        }
      >
    >


  export type VolunteerTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    volunteerId?: boolean
    tagId?: boolean
    volunteer?: boolean | VolunteerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteerTag"]>

  export type VolunteerTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    volunteerId?: boolean
    tagId?: boolean
    volunteer?: boolean | VolunteerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volunteerTag"]>

  export type VolunteerTagSelectScalar = {
    volunteerId?: boolean
    tagId?: boolean
  }

  export type VolunteerTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    volunteer?: boolean | VolunteerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }
  export type VolunteerTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    volunteer?: boolean | VolunteerDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $VolunteerTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VolunteerTag"
    objects: {
      volunteer: Prisma.$VolunteerPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      volunteerId: string
      tagId: string
    }, ExtArgs["result"]["volunteerTag"]>
    composites: {}
  }

  type VolunteerTagGetPayload<S extends boolean | null | undefined | VolunteerTagDefaultArgs> = $Result.GetResult<Prisma.$VolunteerTagPayload, S>

  type VolunteerTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VolunteerTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VolunteerTagCountAggregateInputType | true
    }

  export interface VolunteerTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VolunteerTag'], meta: { name: 'VolunteerTag' } }
    /**
     * Find zero or one VolunteerTag that matches the filter.
     * @param {VolunteerTagFindUniqueArgs} args - Arguments to find a VolunteerTag
     * @example
     * // Get one VolunteerTag
     * const volunteerTag = await prisma.volunteerTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VolunteerTagFindUniqueArgs>(args: SelectSubset<T, VolunteerTagFindUniqueArgs<ExtArgs>>): Prisma__VolunteerTagClient<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VolunteerTag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VolunteerTagFindUniqueOrThrowArgs} args - Arguments to find a VolunteerTag
     * @example
     * // Get one VolunteerTag
     * const volunteerTag = await prisma.volunteerTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VolunteerTagFindUniqueOrThrowArgs>(args: SelectSubset<T, VolunteerTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VolunteerTagClient<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VolunteerTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerTagFindFirstArgs} args - Arguments to find a VolunteerTag
     * @example
     * // Get one VolunteerTag
     * const volunteerTag = await prisma.volunteerTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VolunteerTagFindFirstArgs>(args?: SelectSubset<T, VolunteerTagFindFirstArgs<ExtArgs>>): Prisma__VolunteerTagClient<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VolunteerTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerTagFindFirstOrThrowArgs} args - Arguments to find a VolunteerTag
     * @example
     * // Get one VolunteerTag
     * const volunteerTag = await prisma.volunteerTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VolunteerTagFindFirstOrThrowArgs>(args?: SelectSubset<T, VolunteerTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__VolunteerTagClient<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VolunteerTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VolunteerTags
     * const volunteerTags = await prisma.volunteerTag.findMany()
     * 
     * // Get first 10 VolunteerTags
     * const volunteerTags = await prisma.volunteerTag.findMany({ take: 10 })
     * 
     * // Only select the `volunteerId`
     * const volunteerTagWithVolunteerIdOnly = await prisma.volunteerTag.findMany({ select: { volunteerId: true } })
     * 
     */
    findMany<T extends VolunteerTagFindManyArgs>(args?: SelectSubset<T, VolunteerTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VolunteerTag.
     * @param {VolunteerTagCreateArgs} args - Arguments to create a VolunteerTag.
     * @example
     * // Create one VolunteerTag
     * const VolunteerTag = await prisma.volunteerTag.create({
     *   data: {
     *     // ... data to create a VolunteerTag
     *   }
     * })
     * 
     */
    create<T extends VolunteerTagCreateArgs>(args: SelectSubset<T, VolunteerTagCreateArgs<ExtArgs>>): Prisma__VolunteerTagClient<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VolunteerTags.
     * @param {VolunteerTagCreateManyArgs} args - Arguments to create many VolunteerTags.
     * @example
     * // Create many VolunteerTags
     * const volunteerTag = await prisma.volunteerTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VolunteerTagCreateManyArgs>(args?: SelectSubset<T, VolunteerTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VolunteerTags and returns the data saved in the database.
     * @param {VolunteerTagCreateManyAndReturnArgs} args - Arguments to create many VolunteerTags.
     * @example
     * // Create many VolunteerTags
     * const volunteerTag = await prisma.volunteerTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VolunteerTags and only return the `volunteerId`
     * const volunteerTagWithVolunteerIdOnly = await prisma.volunteerTag.createManyAndReturn({ 
     *   select: { volunteerId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VolunteerTagCreateManyAndReturnArgs>(args?: SelectSubset<T, VolunteerTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VolunteerTag.
     * @param {VolunteerTagDeleteArgs} args - Arguments to delete one VolunteerTag.
     * @example
     * // Delete one VolunteerTag
     * const VolunteerTag = await prisma.volunteerTag.delete({
     *   where: {
     *     // ... filter to delete one VolunteerTag
     *   }
     * })
     * 
     */
    delete<T extends VolunteerTagDeleteArgs>(args: SelectSubset<T, VolunteerTagDeleteArgs<ExtArgs>>): Prisma__VolunteerTagClient<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VolunteerTag.
     * @param {VolunteerTagUpdateArgs} args - Arguments to update one VolunteerTag.
     * @example
     * // Update one VolunteerTag
     * const volunteerTag = await prisma.volunteerTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VolunteerTagUpdateArgs>(args: SelectSubset<T, VolunteerTagUpdateArgs<ExtArgs>>): Prisma__VolunteerTagClient<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VolunteerTags.
     * @param {VolunteerTagDeleteManyArgs} args - Arguments to filter VolunteerTags to delete.
     * @example
     * // Delete a few VolunteerTags
     * const { count } = await prisma.volunteerTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VolunteerTagDeleteManyArgs>(args?: SelectSubset<T, VolunteerTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VolunteerTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VolunteerTags
     * const volunteerTag = await prisma.volunteerTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VolunteerTagUpdateManyArgs>(args: SelectSubset<T, VolunteerTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VolunteerTag.
     * @param {VolunteerTagUpsertArgs} args - Arguments to update or create a VolunteerTag.
     * @example
     * // Update or create a VolunteerTag
     * const volunteerTag = await prisma.volunteerTag.upsert({
     *   create: {
     *     // ... data to create a VolunteerTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VolunteerTag we want to update
     *   }
     * })
     */
    upsert<T extends VolunteerTagUpsertArgs>(args: SelectSubset<T, VolunteerTagUpsertArgs<ExtArgs>>): Prisma__VolunteerTagClient<$Result.GetResult<Prisma.$VolunteerTagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VolunteerTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerTagCountArgs} args - Arguments to filter VolunteerTags to count.
     * @example
     * // Count the number of VolunteerTags
     * const count = await prisma.volunteerTag.count({
     *   where: {
     *     // ... the filter for the VolunteerTags we want to count
     *   }
     * })
    **/
    count<T extends VolunteerTagCountArgs>(
      args?: Subset<T, VolunteerTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VolunteerTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VolunteerTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VolunteerTagAggregateArgs>(args: Subset<T, VolunteerTagAggregateArgs>): Prisma.PrismaPromise<GetVolunteerTagAggregateType<T>>

    /**
     * Group by VolunteerTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolunteerTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VolunteerTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VolunteerTagGroupByArgs['orderBy'] }
        : { orderBy?: VolunteerTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VolunteerTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVolunteerTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VolunteerTag model
   */
  readonly fields: VolunteerTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VolunteerTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VolunteerTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    volunteer<T extends VolunteerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VolunteerDefaultArgs<ExtArgs>>): Prisma__VolunteerClient<$Result.GetResult<Prisma.$VolunteerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VolunteerTag model
   */ 
  interface VolunteerTagFieldRefs {
    readonly volunteerId: FieldRef<"VolunteerTag", 'String'>
    readonly tagId: FieldRef<"VolunteerTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VolunteerTag findUnique
   */
  export type VolunteerTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerTag to fetch.
     */
    where: VolunteerTagWhereUniqueInput
  }

  /**
   * VolunteerTag findUniqueOrThrow
   */
  export type VolunteerTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerTag to fetch.
     */
    where: VolunteerTagWhereUniqueInput
  }

  /**
   * VolunteerTag findFirst
   */
  export type VolunteerTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerTag to fetch.
     */
    where?: VolunteerTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerTags to fetch.
     */
    orderBy?: VolunteerTagOrderByWithRelationInput | VolunteerTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VolunteerTags.
     */
    cursor?: VolunteerTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VolunteerTags.
     */
    distinct?: VolunteerTagScalarFieldEnum | VolunteerTagScalarFieldEnum[]
  }

  /**
   * VolunteerTag findFirstOrThrow
   */
  export type VolunteerTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerTag to fetch.
     */
    where?: VolunteerTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerTags to fetch.
     */
    orderBy?: VolunteerTagOrderByWithRelationInput | VolunteerTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VolunteerTags.
     */
    cursor?: VolunteerTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VolunteerTags.
     */
    distinct?: VolunteerTagScalarFieldEnum | VolunteerTagScalarFieldEnum[]
  }

  /**
   * VolunteerTag findMany
   */
  export type VolunteerTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * Filter, which VolunteerTags to fetch.
     */
    where?: VolunteerTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VolunteerTags to fetch.
     */
    orderBy?: VolunteerTagOrderByWithRelationInput | VolunteerTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VolunteerTags.
     */
    cursor?: VolunteerTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VolunteerTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VolunteerTags.
     */
    skip?: number
    distinct?: VolunteerTagScalarFieldEnum | VolunteerTagScalarFieldEnum[]
  }

  /**
   * VolunteerTag create
   */
  export type VolunteerTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * The data needed to create a VolunteerTag.
     */
    data: XOR<VolunteerTagCreateInput, VolunteerTagUncheckedCreateInput>
  }

  /**
   * VolunteerTag createMany
   */
  export type VolunteerTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VolunteerTags.
     */
    data: VolunteerTagCreateManyInput | VolunteerTagCreateManyInput[]
  }

  /**
   * VolunteerTag createManyAndReturn
   */
  export type VolunteerTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VolunteerTags.
     */
    data: VolunteerTagCreateManyInput | VolunteerTagCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VolunteerTag update
   */
  export type VolunteerTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * The data needed to update a VolunteerTag.
     */
    data: XOR<VolunteerTagUpdateInput, VolunteerTagUncheckedUpdateInput>
    /**
     * Choose, which VolunteerTag to update.
     */
    where: VolunteerTagWhereUniqueInput
  }

  /**
   * VolunteerTag updateMany
   */
  export type VolunteerTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VolunteerTags.
     */
    data: XOR<VolunteerTagUpdateManyMutationInput, VolunteerTagUncheckedUpdateManyInput>
    /**
     * Filter which VolunteerTags to update
     */
    where?: VolunteerTagWhereInput
  }

  /**
   * VolunteerTag upsert
   */
  export type VolunteerTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * The filter to search for the VolunteerTag to update in case it exists.
     */
    where: VolunteerTagWhereUniqueInput
    /**
     * In case the VolunteerTag found by the `where` argument doesn't exist, create a new VolunteerTag with this data.
     */
    create: XOR<VolunteerTagCreateInput, VolunteerTagUncheckedCreateInput>
    /**
     * In case the VolunteerTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VolunteerTagUpdateInput, VolunteerTagUncheckedUpdateInput>
  }

  /**
   * VolunteerTag delete
   */
  export type VolunteerTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
    /**
     * Filter which VolunteerTag to delete.
     */
    where: VolunteerTagWhereUniqueInput
  }

  /**
   * VolunteerTag deleteMany
   */
  export type VolunteerTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VolunteerTags to delete
     */
    where?: VolunteerTagWhereInput
  }

  /**
   * VolunteerTag without action
   */
  export type VolunteerTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolunteerTag
     */
    select?: VolunteerTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolunteerTagInclude<ExtArgs> | null
  }


  /**
   * Model StallApplication
   */

  export type AggregateStallApplication = {
    _count: StallApplicationCountAggregateOutputType | null
    _avg: StallApplicationAvgAggregateOutputType | null
    _sum: StallApplicationSumAggregateOutputType | null
    _min: StallApplicationMinAggregateOutputType | null
    _max: StallApplicationMaxAggregateOutputType | null
  }

  export type StallApplicationAvgAggregateOutputType = {
    priceRangeMin: number | null
    priceRangeMax: number | null
    boothCount: number | null
    tentWidth: number | null
    tentDepth: number | null
    tentHeight: number | null
    vehicleCount: number | null
    rentalTables: number | null
    rentalChairs: number | null
  }

  export type StallApplicationSumAggregateOutputType = {
    priceRangeMin: number | null
    priceRangeMax: number | null
    boothCount: number | null
    tentWidth: number | null
    tentDepth: number | null
    tentHeight: number | null
    vehicleCount: number | null
    rentalTables: number | null
    rentalChairs: number | null
  }

  export type StallApplicationMinAggregateOutputType = {
    id: string | null
    groupName: string | null
    representative: string | null
    address: string | null
    email: string | null
    phone: string | null
    boothType: string | null
    items: string | null
    priceRangeMin: number | null
    priceRangeMax: number | null
    boothCount: number | null
    tentWidth: number | null
    tentDepth: number | null
    tentHeight: number | null
    vehicleCount: number | null
    rentalTables: number | null
    rentalChairs: number | null
    questions: string | null
    eventId: string | null
    createdAt: Date | null
  }

  export type StallApplicationMaxAggregateOutputType = {
    id: string | null
    groupName: string | null
    representative: string | null
    address: string | null
    email: string | null
    phone: string | null
    boothType: string | null
    items: string | null
    priceRangeMin: number | null
    priceRangeMax: number | null
    boothCount: number | null
    tentWidth: number | null
    tentDepth: number | null
    tentHeight: number | null
    vehicleCount: number | null
    rentalTables: number | null
    rentalChairs: number | null
    questions: string | null
    eventId: string | null
    createdAt: Date | null
  }

  export type StallApplicationCountAggregateOutputType = {
    id: number
    groupName: number
    representative: number
    address: number
    email: number
    phone: number
    boothType: number
    items: number
    priceRangeMin: number
    priceRangeMax: number
    boothCount: number
    tentWidth: number
    tentDepth: number
    tentHeight: number
    vehicleCount: number
    rentalTables: number
    rentalChairs: number
    questions: number
    eventId: number
    createdAt: number
    _all: number
  }


  export type StallApplicationAvgAggregateInputType = {
    priceRangeMin?: true
    priceRangeMax?: true
    boothCount?: true
    tentWidth?: true
    tentDepth?: true
    tentHeight?: true
    vehicleCount?: true
    rentalTables?: true
    rentalChairs?: true
  }

  export type StallApplicationSumAggregateInputType = {
    priceRangeMin?: true
    priceRangeMax?: true
    boothCount?: true
    tentWidth?: true
    tentDepth?: true
    tentHeight?: true
    vehicleCount?: true
    rentalTables?: true
    rentalChairs?: true
  }

  export type StallApplicationMinAggregateInputType = {
    id?: true
    groupName?: true
    representative?: true
    address?: true
    email?: true
    phone?: true
    boothType?: true
    items?: true
    priceRangeMin?: true
    priceRangeMax?: true
    boothCount?: true
    tentWidth?: true
    tentDepth?: true
    tentHeight?: true
    vehicleCount?: true
    rentalTables?: true
    rentalChairs?: true
    questions?: true
    eventId?: true
    createdAt?: true
  }

  export type StallApplicationMaxAggregateInputType = {
    id?: true
    groupName?: true
    representative?: true
    address?: true
    email?: true
    phone?: true
    boothType?: true
    items?: true
    priceRangeMin?: true
    priceRangeMax?: true
    boothCount?: true
    tentWidth?: true
    tentDepth?: true
    tentHeight?: true
    vehicleCount?: true
    rentalTables?: true
    rentalChairs?: true
    questions?: true
    eventId?: true
    createdAt?: true
  }

  export type StallApplicationCountAggregateInputType = {
    id?: true
    groupName?: true
    representative?: true
    address?: true
    email?: true
    phone?: true
    boothType?: true
    items?: true
    priceRangeMin?: true
    priceRangeMax?: true
    boothCount?: true
    tentWidth?: true
    tentDepth?: true
    tentHeight?: true
    vehicleCount?: true
    rentalTables?: true
    rentalChairs?: true
    questions?: true
    eventId?: true
    createdAt?: true
    _all?: true
  }

  export type StallApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StallApplication to aggregate.
     */
    where?: StallApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StallApplications to fetch.
     */
    orderBy?: StallApplicationOrderByWithRelationInput | StallApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StallApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StallApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StallApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StallApplications
    **/
    _count?: true | StallApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StallApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StallApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StallApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StallApplicationMaxAggregateInputType
  }

  export type GetStallApplicationAggregateType<T extends StallApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateStallApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStallApplication[P]>
      : GetScalarType<T[P], AggregateStallApplication[P]>
  }




  export type StallApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StallApplicationWhereInput
    orderBy?: StallApplicationOrderByWithAggregationInput | StallApplicationOrderByWithAggregationInput[]
    by: StallApplicationScalarFieldEnum[] | StallApplicationScalarFieldEnum
    having?: StallApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StallApplicationCountAggregateInputType | true
    _avg?: StallApplicationAvgAggregateInputType
    _sum?: StallApplicationSumAggregateInputType
    _min?: StallApplicationMinAggregateInputType
    _max?: StallApplicationMaxAggregateInputType
  }

  export type StallApplicationGroupByOutputType = {
    id: string
    groupName: string
    representative: string
    address: string | null
    email: string
    phone: string
    boothType: string
    items: string | null
    priceRangeMin: number | null
    priceRangeMax: number | null
    boothCount: number | null
    tentWidth: number | null
    tentDepth: number | null
    tentHeight: number | null
    vehicleCount: number | null
    rentalTables: number | null
    rentalChairs: number | null
    questions: string | null
    eventId: string | null
    createdAt: Date
    _count: StallApplicationCountAggregateOutputType | null
    _avg: StallApplicationAvgAggregateOutputType | null
    _sum: StallApplicationSumAggregateOutputType | null
    _min: StallApplicationMinAggregateOutputType | null
    _max: StallApplicationMaxAggregateOutputType | null
  }

  type GetStallApplicationGroupByPayload<T extends StallApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StallApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StallApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StallApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], StallApplicationGroupByOutputType[P]>
        }
      >
    >


  export type StallApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    representative?: boolean
    address?: boolean
    email?: boolean
    phone?: boolean
    boothType?: boolean
    items?: boolean
    priceRangeMin?: boolean
    priceRangeMax?: boolean
    boothCount?: boolean
    tentWidth?: boolean
    tentDepth?: boolean
    tentHeight?: boolean
    vehicleCount?: boolean
    rentalTables?: boolean
    rentalChairs?: boolean
    questions?: boolean
    eventId?: boolean
    createdAt?: boolean
    event?: boolean | StallApplication$eventArgs<ExtArgs>
    adminNotes?: boolean | StallApplication$adminNotesArgs<ExtArgs>
    _count?: boolean | StallApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stallApplication"]>

  export type StallApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    representative?: boolean
    address?: boolean
    email?: boolean
    phone?: boolean
    boothType?: boolean
    items?: boolean
    priceRangeMin?: boolean
    priceRangeMax?: boolean
    boothCount?: boolean
    tentWidth?: boolean
    tentDepth?: boolean
    tentHeight?: boolean
    vehicleCount?: boolean
    rentalTables?: boolean
    rentalChairs?: boolean
    questions?: boolean
    eventId?: boolean
    createdAt?: boolean
    event?: boolean | StallApplication$eventArgs<ExtArgs>
  }, ExtArgs["result"]["stallApplication"]>

  export type StallApplicationSelectScalar = {
    id?: boolean
    groupName?: boolean
    representative?: boolean
    address?: boolean
    email?: boolean
    phone?: boolean
    boothType?: boolean
    items?: boolean
    priceRangeMin?: boolean
    priceRangeMax?: boolean
    boothCount?: boolean
    tentWidth?: boolean
    tentDepth?: boolean
    tentHeight?: boolean
    vehicleCount?: boolean
    rentalTables?: boolean
    rentalChairs?: boolean
    questions?: boolean
    eventId?: boolean
    createdAt?: boolean
  }

  export type StallApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | StallApplication$eventArgs<ExtArgs>
    adminNotes?: boolean | StallApplication$adminNotesArgs<ExtArgs>
    _count?: boolean | StallApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StallApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | StallApplication$eventArgs<ExtArgs>
  }

  export type $StallApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StallApplication"
    objects: {
      event: Prisma.$EventPayload<ExtArgs> | null
      adminNotes: Prisma.$ApplicationNotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      groupName: string
      representative: string
      address: string | null
      email: string
      phone: string
      boothType: string
      items: string | null
      priceRangeMin: number | null
      priceRangeMax: number | null
      boothCount: number | null
      tentWidth: number | null
      tentDepth: number | null
      tentHeight: number | null
      vehicleCount: number | null
      rentalTables: number | null
      rentalChairs: number | null
      questions: string | null
      eventId: string | null
      createdAt: Date
    }, ExtArgs["result"]["stallApplication"]>
    composites: {}
  }

  type StallApplicationGetPayload<S extends boolean | null | undefined | StallApplicationDefaultArgs> = $Result.GetResult<Prisma.$StallApplicationPayload, S>

  type StallApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StallApplicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StallApplicationCountAggregateInputType | true
    }

  export interface StallApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StallApplication'], meta: { name: 'StallApplication' } }
    /**
     * Find zero or one StallApplication that matches the filter.
     * @param {StallApplicationFindUniqueArgs} args - Arguments to find a StallApplication
     * @example
     * // Get one StallApplication
     * const stallApplication = await prisma.stallApplication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StallApplicationFindUniqueArgs>(args: SelectSubset<T, StallApplicationFindUniqueArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StallApplication that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StallApplicationFindUniqueOrThrowArgs} args - Arguments to find a StallApplication
     * @example
     * // Get one StallApplication
     * const stallApplication = await prisma.stallApplication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StallApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, StallApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StallApplication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StallApplicationFindFirstArgs} args - Arguments to find a StallApplication
     * @example
     * // Get one StallApplication
     * const stallApplication = await prisma.stallApplication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StallApplicationFindFirstArgs>(args?: SelectSubset<T, StallApplicationFindFirstArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StallApplication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StallApplicationFindFirstOrThrowArgs} args - Arguments to find a StallApplication
     * @example
     * // Get one StallApplication
     * const stallApplication = await prisma.stallApplication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StallApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, StallApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StallApplications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StallApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StallApplications
     * const stallApplications = await prisma.stallApplication.findMany()
     * 
     * // Get first 10 StallApplications
     * const stallApplications = await prisma.stallApplication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stallApplicationWithIdOnly = await prisma.stallApplication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StallApplicationFindManyArgs>(args?: SelectSubset<T, StallApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StallApplication.
     * @param {StallApplicationCreateArgs} args - Arguments to create a StallApplication.
     * @example
     * // Create one StallApplication
     * const StallApplication = await prisma.stallApplication.create({
     *   data: {
     *     // ... data to create a StallApplication
     *   }
     * })
     * 
     */
    create<T extends StallApplicationCreateArgs>(args: SelectSubset<T, StallApplicationCreateArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StallApplications.
     * @param {StallApplicationCreateManyArgs} args - Arguments to create many StallApplications.
     * @example
     * // Create many StallApplications
     * const stallApplication = await prisma.stallApplication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StallApplicationCreateManyArgs>(args?: SelectSubset<T, StallApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StallApplications and returns the data saved in the database.
     * @param {StallApplicationCreateManyAndReturnArgs} args - Arguments to create many StallApplications.
     * @example
     * // Create many StallApplications
     * const stallApplication = await prisma.stallApplication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StallApplications and only return the `id`
     * const stallApplicationWithIdOnly = await prisma.stallApplication.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StallApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, StallApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StallApplication.
     * @param {StallApplicationDeleteArgs} args - Arguments to delete one StallApplication.
     * @example
     * // Delete one StallApplication
     * const StallApplication = await prisma.stallApplication.delete({
     *   where: {
     *     // ... filter to delete one StallApplication
     *   }
     * })
     * 
     */
    delete<T extends StallApplicationDeleteArgs>(args: SelectSubset<T, StallApplicationDeleteArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StallApplication.
     * @param {StallApplicationUpdateArgs} args - Arguments to update one StallApplication.
     * @example
     * // Update one StallApplication
     * const stallApplication = await prisma.stallApplication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StallApplicationUpdateArgs>(args: SelectSubset<T, StallApplicationUpdateArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StallApplications.
     * @param {StallApplicationDeleteManyArgs} args - Arguments to filter StallApplications to delete.
     * @example
     * // Delete a few StallApplications
     * const { count } = await prisma.stallApplication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StallApplicationDeleteManyArgs>(args?: SelectSubset<T, StallApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StallApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StallApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StallApplications
     * const stallApplication = await prisma.stallApplication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StallApplicationUpdateManyArgs>(args: SelectSubset<T, StallApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StallApplication.
     * @param {StallApplicationUpsertArgs} args - Arguments to update or create a StallApplication.
     * @example
     * // Update or create a StallApplication
     * const stallApplication = await prisma.stallApplication.upsert({
     *   create: {
     *     // ... data to create a StallApplication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StallApplication we want to update
     *   }
     * })
     */
    upsert<T extends StallApplicationUpsertArgs>(args: SelectSubset<T, StallApplicationUpsertArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StallApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StallApplicationCountArgs} args - Arguments to filter StallApplications to count.
     * @example
     * // Count the number of StallApplications
     * const count = await prisma.stallApplication.count({
     *   where: {
     *     // ... the filter for the StallApplications we want to count
     *   }
     * })
    **/
    count<T extends StallApplicationCountArgs>(
      args?: Subset<T, StallApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StallApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StallApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StallApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StallApplicationAggregateArgs>(args: Subset<T, StallApplicationAggregateArgs>): Prisma.PrismaPromise<GetStallApplicationAggregateType<T>>

    /**
     * Group by StallApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StallApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StallApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StallApplicationGroupByArgs['orderBy'] }
        : { orderBy?: StallApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StallApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStallApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StallApplication model
   */
  readonly fields: StallApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StallApplication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StallApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends StallApplication$eventArgs<ExtArgs> = {}>(args?: Subset<T, StallApplication$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    adminNotes<T extends StallApplication$adminNotesArgs<ExtArgs> = {}>(args?: Subset<T, StallApplication$adminNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StallApplication model
   */ 
  interface StallApplicationFieldRefs {
    readonly id: FieldRef<"StallApplication", 'String'>
    readonly groupName: FieldRef<"StallApplication", 'String'>
    readonly representative: FieldRef<"StallApplication", 'String'>
    readonly address: FieldRef<"StallApplication", 'String'>
    readonly email: FieldRef<"StallApplication", 'String'>
    readonly phone: FieldRef<"StallApplication", 'String'>
    readonly boothType: FieldRef<"StallApplication", 'String'>
    readonly items: FieldRef<"StallApplication", 'String'>
    readonly priceRangeMin: FieldRef<"StallApplication", 'Int'>
    readonly priceRangeMax: FieldRef<"StallApplication", 'Int'>
    readonly boothCount: FieldRef<"StallApplication", 'Int'>
    readonly tentWidth: FieldRef<"StallApplication", 'Float'>
    readonly tentDepth: FieldRef<"StallApplication", 'Float'>
    readonly tentHeight: FieldRef<"StallApplication", 'Float'>
    readonly vehicleCount: FieldRef<"StallApplication", 'Int'>
    readonly rentalTables: FieldRef<"StallApplication", 'Int'>
    readonly rentalChairs: FieldRef<"StallApplication", 'Int'>
    readonly questions: FieldRef<"StallApplication", 'String'>
    readonly eventId: FieldRef<"StallApplication", 'String'>
    readonly createdAt: FieldRef<"StallApplication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StallApplication findUnique
   */
  export type StallApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * Filter, which StallApplication to fetch.
     */
    where: StallApplicationWhereUniqueInput
  }

  /**
   * StallApplication findUniqueOrThrow
   */
  export type StallApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * Filter, which StallApplication to fetch.
     */
    where: StallApplicationWhereUniqueInput
  }

  /**
   * StallApplication findFirst
   */
  export type StallApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * Filter, which StallApplication to fetch.
     */
    where?: StallApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StallApplications to fetch.
     */
    orderBy?: StallApplicationOrderByWithRelationInput | StallApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StallApplications.
     */
    cursor?: StallApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StallApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StallApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StallApplications.
     */
    distinct?: StallApplicationScalarFieldEnum | StallApplicationScalarFieldEnum[]
  }

  /**
   * StallApplication findFirstOrThrow
   */
  export type StallApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * Filter, which StallApplication to fetch.
     */
    where?: StallApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StallApplications to fetch.
     */
    orderBy?: StallApplicationOrderByWithRelationInput | StallApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StallApplications.
     */
    cursor?: StallApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StallApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StallApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StallApplications.
     */
    distinct?: StallApplicationScalarFieldEnum | StallApplicationScalarFieldEnum[]
  }

  /**
   * StallApplication findMany
   */
  export type StallApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * Filter, which StallApplications to fetch.
     */
    where?: StallApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StallApplications to fetch.
     */
    orderBy?: StallApplicationOrderByWithRelationInput | StallApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StallApplications.
     */
    cursor?: StallApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StallApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StallApplications.
     */
    skip?: number
    distinct?: StallApplicationScalarFieldEnum | StallApplicationScalarFieldEnum[]
  }

  /**
   * StallApplication create
   */
  export type StallApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a StallApplication.
     */
    data: XOR<StallApplicationCreateInput, StallApplicationUncheckedCreateInput>
  }

  /**
   * StallApplication createMany
   */
  export type StallApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StallApplications.
     */
    data: StallApplicationCreateManyInput | StallApplicationCreateManyInput[]
  }

  /**
   * StallApplication createManyAndReturn
   */
  export type StallApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StallApplications.
     */
    data: StallApplicationCreateManyInput | StallApplicationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StallApplication update
   */
  export type StallApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a StallApplication.
     */
    data: XOR<StallApplicationUpdateInput, StallApplicationUncheckedUpdateInput>
    /**
     * Choose, which StallApplication to update.
     */
    where: StallApplicationWhereUniqueInput
  }

  /**
   * StallApplication updateMany
   */
  export type StallApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StallApplications.
     */
    data: XOR<StallApplicationUpdateManyMutationInput, StallApplicationUncheckedUpdateManyInput>
    /**
     * Filter which StallApplications to update
     */
    where?: StallApplicationWhereInput
  }

  /**
   * StallApplication upsert
   */
  export type StallApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the StallApplication to update in case it exists.
     */
    where: StallApplicationWhereUniqueInput
    /**
     * In case the StallApplication found by the `where` argument doesn't exist, create a new StallApplication with this data.
     */
    create: XOR<StallApplicationCreateInput, StallApplicationUncheckedCreateInput>
    /**
     * In case the StallApplication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StallApplicationUpdateInput, StallApplicationUncheckedUpdateInput>
  }

  /**
   * StallApplication delete
   */
  export type StallApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    /**
     * Filter which StallApplication to delete.
     */
    where: StallApplicationWhereUniqueInput
  }

  /**
   * StallApplication deleteMany
   */
  export type StallApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StallApplications to delete
     */
    where?: StallApplicationWhereInput
  }

  /**
   * StallApplication.event
   */
  export type StallApplication$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * StallApplication.adminNotes
   */
  export type StallApplication$adminNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    where?: ApplicationNoteWhereInput
    orderBy?: ApplicationNoteOrderByWithRelationInput | ApplicationNoteOrderByWithRelationInput[]
    cursor?: ApplicationNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationNoteScalarFieldEnum | ApplicationNoteScalarFieldEnum[]
  }

  /**
   * StallApplication without action
   */
  export type StallApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
  }


  /**
   * Model PerformerApplication
   */

  export type AggregatePerformerApplication = {
    _count: PerformerApplicationCountAggregateOutputType | null
    _avg: PerformerApplicationAvgAggregateOutputType | null
    _sum: PerformerApplicationSumAggregateOutputType | null
    _min: PerformerApplicationMinAggregateOutputType | null
    _max: PerformerApplicationMaxAggregateOutputType | null
  }

  export type PerformerApplicationAvgAggregateOutputType = {
    performerCount: number | null
    slotCount: number | null
    vehicleCount: number | null
    rentalAmp: number | null
    rentalMic: number | null
  }

  export type PerformerApplicationSumAggregateOutputType = {
    performerCount: number | null
    slotCount: number | null
    vehicleCount: number | null
    rentalAmp: number | null
    rentalMic: number | null
  }

  export type PerformerApplicationMinAggregateOutputType = {
    id: string | null
    groupName: string | null
    representative: string | null
    address: string | null
    email: string | null
    phone: string | null
    performance: string | null
    performerCount: number | null
    slotCount: number | null
    vehicleCount: number | null
    rentalAmp: number | null
    rentalMic: number | null
    questions: string | null
    eventId: string | null
    createdAt: Date | null
  }

  export type PerformerApplicationMaxAggregateOutputType = {
    id: string | null
    groupName: string | null
    representative: string | null
    address: string | null
    email: string | null
    phone: string | null
    performance: string | null
    performerCount: number | null
    slotCount: number | null
    vehicleCount: number | null
    rentalAmp: number | null
    rentalMic: number | null
    questions: string | null
    eventId: string | null
    createdAt: Date | null
  }

  export type PerformerApplicationCountAggregateOutputType = {
    id: number
    groupName: number
    representative: number
    address: number
    email: number
    phone: number
    performance: number
    performerCount: number
    slotCount: number
    vehicleCount: number
    rentalAmp: number
    rentalMic: number
    questions: number
    eventId: number
    createdAt: number
    _all: number
  }


  export type PerformerApplicationAvgAggregateInputType = {
    performerCount?: true
    slotCount?: true
    vehicleCount?: true
    rentalAmp?: true
    rentalMic?: true
  }

  export type PerformerApplicationSumAggregateInputType = {
    performerCount?: true
    slotCount?: true
    vehicleCount?: true
    rentalAmp?: true
    rentalMic?: true
  }

  export type PerformerApplicationMinAggregateInputType = {
    id?: true
    groupName?: true
    representative?: true
    address?: true
    email?: true
    phone?: true
    performance?: true
    performerCount?: true
    slotCount?: true
    vehicleCount?: true
    rentalAmp?: true
    rentalMic?: true
    questions?: true
    eventId?: true
    createdAt?: true
  }

  export type PerformerApplicationMaxAggregateInputType = {
    id?: true
    groupName?: true
    representative?: true
    address?: true
    email?: true
    phone?: true
    performance?: true
    performerCount?: true
    slotCount?: true
    vehicleCount?: true
    rentalAmp?: true
    rentalMic?: true
    questions?: true
    eventId?: true
    createdAt?: true
  }

  export type PerformerApplicationCountAggregateInputType = {
    id?: true
    groupName?: true
    representative?: true
    address?: true
    email?: true
    phone?: true
    performance?: true
    performerCount?: true
    slotCount?: true
    vehicleCount?: true
    rentalAmp?: true
    rentalMic?: true
    questions?: true
    eventId?: true
    createdAt?: true
    _all?: true
  }

  export type PerformerApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformerApplication to aggregate.
     */
    where?: PerformerApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformerApplications to fetch.
     */
    orderBy?: PerformerApplicationOrderByWithRelationInput | PerformerApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PerformerApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformerApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformerApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PerformerApplications
    **/
    _count?: true | PerformerApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PerformerApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PerformerApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PerformerApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PerformerApplicationMaxAggregateInputType
  }

  export type GetPerformerApplicationAggregateType<T extends PerformerApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregatePerformerApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerformerApplication[P]>
      : GetScalarType<T[P], AggregatePerformerApplication[P]>
  }




  export type PerformerApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PerformerApplicationWhereInput
    orderBy?: PerformerApplicationOrderByWithAggregationInput | PerformerApplicationOrderByWithAggregationInput[]
    by: PerformerApplicationScalarFieldEnum[] | PerformerApplicationScalarFieldEnum
    having?: PerformerApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PerformerApplicationCountAggregateInputType | true
    _avg?: PerformerApplicationAvgAggregateInputType
    _sum?: PerformerApplicationSumAggregateInputType
    _min?: PerformerApplicationMinAggregateInputType
    _max?: PerformerApplicationMaxAggregateInputType
  }

  export type PerformerApplicationGroupByOutputType = {
    id: string
    groupName: string
    representative: string
    address: string | null
    email: string
    phone: string
    performance: string
    performerCount: number | null
    slotCount: number | null
    vehicleCount: number | null
    rentalAmp: number | null
    rentalMic: number | null
    questions: string | null
    eventId: string | null
    createdAt: Date
    _count: PerformerApplicationCountAggregateOutputType | null
    _avg: PerformerApplicationAvgAggregateOutputType | null
    _sum: PerformerApplicationSumAggregateOutputType | null
    _min: PerformerApplicationMinAggregateOutputType | null
    _max: PerformerApplicationMaxAggregateOutputType | null
  }

  type GetPerformerApplicationGroupByPayload<T extends PerformerApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PerformerApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PerformerApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PerformerApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], PerformerApplicationGroupByOutputType[P]>
        }
      >
    >


  export type PerformerApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    representative?: boolean
    address?: boolean
    email?: boolean
    phone?: boolean
    performance?: boolean
    performerCount?: boolean
    slotCount?: boolean
    vehicleCount?: boolean
    rentalAmp?: boolean
    rentalMic?: boolean
    questions?: boolean
    eventId?: boolean
    createdAt?: boolean
    event?: boolean | PerformerApplication$eventArgs<ExtArgs>
    adminNotes?: boolean | PerformerApplication$adminNotesArgs<ExtArgs>
    _count?: boolean | PerformerApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["performerApplication"]>

  export type PerformerApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    representative?: boolean
    address?: boolean
    email?: boolean
    phone?: boolean
    performance?: boolean
    performerCount?: boolean
    slotCount?: boolean
    vehicleCount?: boolean
    rentalAmp?: boolean
    rentalMic?: boolean
    questions?: boolean
    eventId?: boolean
    createdAt?: boolean
    event?: boolean | PerformerApplication$eventArgs<ExtArgs>
  }, ExtArgs["result"]["performerApplication"]>

  export type PerformerApplicationSelectScalar = {
    id?: boolean
    groupName?: boolean
    representative?: boolean
    address?: boolean
    email?: boolean
    phone?: boolean
    performance?: boolean
    performerCount?: boolean
    slotCount?: boolean
    vehicleCount?: boolean
    rentalAmp?: boolean
    rentalMic?: boolean
    questions?: boolean
    eventId?: boolean
    createdAt?: boolean
  }

  export type PerformerApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | PerformerApplication$eventArgs<ExtArgs>
    adminNotes?: boolean | PerformerApplication$adminNotesArgs<ExtArgs>
    _count?: boolean | PerformerApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PerformerApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | PerformerApplication$eventArgs<ExtArgs>
  }

  export type $PerformerApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PerformerApplication"
    objects: {
      event: Prisma.$EventPayload<ExtArgs> | null
      adminNotes: Prisma.$ApplicationNotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      groupName: string
      representative: string
      address: string | null
      email: string
      phone: string
      performance: string
      performerCount: number | null
      slotCount: number | null
      vehicleCount: number | null
      rentalAmp: number | null
      rentalMic: number | null
      questions: string | null
      eventId: string | null
      createdAt: Date
    }, ExtArgs["result"]["performerApplication"]>
    composites: {}
  }

  type PerformerApplicationGetPayload<S extends boolean | null | undefined | PerformerApplicationDefaultArgs> = $Result.GetResult<Prisma.$PerformerApplicationPayload, S>

  type PerformerApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PerformerApplicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PerformerApplicationCountAggregateInputType | true
    }

  export interface PerformerApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PerformerApplication'], meta: { name: 'PerformerApplication' } }
    /**
     * Find zero or one PerformerApplication that matches the filter.
     * @param {PerformerApplicationFindUniqueArgs} args - Arguments to find a PerformerApplication
     * @example
     * // Get one PerformerApplication
     * const performerApplication = await prisma.performerApplication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PerformerApplicationFindUniqueArgs>(args: SelectSubset<T, PerformerApplicationFindUniqueArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PerformerApplication that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PerformerApplicationFindUniqueOrThrowArgs} args - Arguments to find a PerformerApplication
     * @example
     * // Get one PerformerApplication
     * const performerApplication = await prisma.performerApplication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PerformerApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, PerformerApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PerformerApplication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerApplicationFindFirstArgs} args - Arguments to find a PerformerApplication
     * @example
     * // Get one PerformerApplication
     * const performerApplication = await prisma.performerApplication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PerformerApplicationFindFirstArgs>(args?: SelectSubset<T, PerformerApplicationFindFirstArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PerformerApplication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerApplicationFindFirstOrThrowArgs} args - Arguments to find a PerformerApplication
     * @example
     * // Get one PerformerApplication
     * const performerApplication = await prisma.performerApplication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PerformerApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, PerformerApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PerformerApplications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PerformerApplications
     * const performerApplications = await prisma.performerApplication.findMany()
     * 
     * // Get first 10 PerformerApplications
     * const performerApplications = await prisma.performerApplication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const performerApplicationWithIdOnly = await prisma.performerApplication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PerformerApplicationFindManyArgs>(args?: SelectSubset<T, PerformerApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PerformerApplication.
     * @param {PerformerApplicationCreateArgs} args - Arguments to create a PerformerApplication.
     * @example
     * // Create one PerformerApplication
     * const PerformerApplication = await prisma.performerApplication.create({
     *   data: {
     *     // ... data to create a PerformerApplication
     *   }
     * })
     * 
     */
    create<T extends PerformerApplicationCreateArgs>(args: SelectSubset<T, PerformerApplicationCreateArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PerformerApplications.
     * @param {PerformerApplicationCreateManyArgs} args - Arguments to create many PerformerApplications.
     * @example
     * // Create many PerformerApplications
     * const performerApplication = await prisma.performerApplication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PerformerApplicationCreateManyArgs>(args?: SelectSubset<T, PerformerApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PerformerApplications and returns the data saved in the database.
     * @param {PerformerApplicationCreateManyAndReturnArgs} args - Arguments to create many PerformerApplications.
     * @example
     * // Create many PerformerApplications
     * const performerApplication = await prisma.performerApplication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PerformerApplications and only return the `id`
     * const performerApplicationWithIdOnly = await prisma.performerApplication.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PerformerApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, PerformerApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PerformerApplication.
     * @param {PerformerApplicationDeleteArgs} args - Arguments to delete one PerformerApplication.
     * @example
     * // Delete one PerformerApplication
     * const PerformerApplication = await prisma.performerApplication.delete({
     *   where: {
     *     // ... filter to delete one PerformerApplication
     *   }
     * })
     * 
     */
    delete<T extends PerformerApplicationDeleteArgs>(args: SelectSubset<T, PerformerApplicationDeleteArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PerformerApplication.
     * @param {PerformerApplicationUpdateArgs} args - Arguments to update one PerformerApplication.
     * @example
     * // Update one PerformerApplication
     * const performerApplication = await prisma.performerApplication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PerformerApplicationUpdateArgs>(args: SelectSubset<T, PerformerApplicationUpdateArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PerformerApplications.
     * @param {PerformerApplicationDeleteManyArgs} args - Arguments to filter PerformerApplications to delete.
     * @example
     * // Delete a few PerformerApplications
     * const { count } = await prisma.performerApplication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PerformerApplicationDeleteManyArgs>(args?: SelectSubset<T, PerformerApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PerformerApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PerformerApplications
     * const performerApplication = await prisma.performerApplication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PerformerApplicationUpdateManyArgs>(args: SelectSubset<T, PerformerApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PerformerApplication.
     * @param {PerformerApplicationUpsertArgs} args - Arguments to update or create a PerformerApplication.
     * @example
     * // Update or create a PerformerApplication
     * const performerApplication = await prisma.performerApplication.upsert({
     *   create: {
     *     // ... data to create a PerformerApplication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PerformerApplication we want to update
     *   }
     * })
     */
    upsert<T extends PerformerApplicationUpsertArgs>(args: SelectSubset<T, PerformerApplicationUpsertArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PerformerApplications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerApplicationCountArgs} args - Arguments to filter PerformerApplications to count.
     * @example
     * // Count the number of PerformerApplications
     * const count = await prisma.performerApplication.count({
     *   where: {
     *     // ... the filter for the PerformerApplications we want to count
     *   }
     * })
    **/
    count<T extends PerformerApplicationCountArgs>(
      args?: Subset<T, PerformerApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PerformerApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PerformerApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PerformerApplicationAggregateArgs>(args: Subset<T, PerformerApplicationAggregateArgs>): Prisma.PrismaPromise<GetPerformerApplicationAggregateType<T>>

    /**
     * Group by PerformerApplication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PerformerApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PerformerApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PerformerApplicationGroupByArgs['orderBy'] }
        : { orderBy?: PerformerApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PerformerApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPerformerApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PerformerApplication model
   */
  readonly fields: PerformerApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PerformerApplication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PerformerApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends PerformerApplication$eventArgs<ExtArgs> = {}>(args?: Subset<T, PerformerApplication$eventArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    adminNotes<T extends PerformerApplication$adminNotesArgs<ExtArgs> = {}>(args?: Subset<T, PerformerApplication$adminNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PerformerApplication model
   */ 
  interface PerformerApplicationFieldRefs {
    readonly id: FieldRef<"PerformerApplication", 'String'>
    readonly groupName: FieldRef<"PerformerApplication", 'String'>
    readonly representative: FieldRef<"PerformerApplication", 'String'>
    readonly address: FieldRef<"PerformerApplication", 'String'>
    readonly email: FieldRef<"PerformerApplication", 'String'>
    readonly phone: FieldRef<"PerformerApplication", 'String'>
    readonly performance: FieldRef<"PerformerApplication", 'String'>
    readonly performerCount: FieldRef<"PerformerApplication", 'Int'>
    readonly slotCount: FieldRef<"PerformerApplication", 'Int'>
    readonly vehicleCount: FieldRef<"PerformerApplication", 'Int'>
    readonly rentalAmp: FieldRef<"PerformerApplication", 'Int'>
    readonly rentalMic: FieldRef<"PerformerApplication", 'Int'>
    readonly questions: FieldRef<"PerformerApplication", 'String'>
    readonly eventId: FieldRef<"PerformerApplication", 'String'>
    readonly createdAt: FieldRef<"PerformerApplication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PerformerApplication findUnique
   */
  export type PerformerApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which PerformerApplication to fetch.
     */
    where: PerformerApplicationWhereUniqueInput
  }

  /**
   * PerformerApplication findUniqueOrThrow
   */
  export type PerformerApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which PerformerApplication to fetch.
     */
    where: PerformerApplicationWhereUniqueInput
  }

  /**
   * PerformerApplication findFirst
   */
  export type PerformerApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which PerformerApplication to fetch.
     */
    where?: PerformerApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformerApplications to fetch.
     */
    orderBy?: PerformerApplicationOrderByWithRelationInput | PerformerApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformerApplications.
     */
    cursor?: PerformerApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformerApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformerApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformerApplications.
     */
    distinct?: PerformerApplicationScalarFieldEnum | PerformerApplicationScalarFieldEnum[]
  }

  /**
   * PerformerApplication findFirstOrThrow
   */
  export type PerformerApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which PerformerApplication to fetch.
     */
    where?: PerformerApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformerApplications to fetch.
     */
    orderBy?: PerformerApplicationOrderByWithRelationInput | PerformerApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PerformerApplications.
     */
    cursor?: PerformerApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformerApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformerApplications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PerformerApplications.
     */
    distinct?: PerformerApplicationScalarFieldEnum | PerformerApplicationScalarFieldEnum[]
  }

  /**
   * PerformerApplication findMany
   */
  export type PerformerApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * Filter, which PerformerApplications to fetch.
     */
    where?: PerformerApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PerformerApplications to fetch.
     */
    orderBy?: PerformerApplicationOrderByWithRelationInput | PerformerApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PerformerApplications.
     */
    cursor?: PerformerApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PerformerApplications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PerformerApplications.
     */
    skip?: number
    distinct?: PerformerApplicationScalarFieldEnum | PerformerApplicationScalarFieldEnum[]
  }

  /**
   * PerformerApplication create
   */
  export type PerformerApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a PerformerApplication.
     */
    data: XOR<PerformerApplicationCreateInput, PerformerApplicationUncheckedCreateInput>
  }

  /**
   * PerformerApplication createMany
   */
  export type PerformerApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PerformerApplications.
     */
    data: PerformerApplicationCreateManyInput | PerformerApplicationCreateManyInput[]
  }

  /**
   * PerformerApplication createManyAndReturn
   */
  export type PerformerApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PerformerApplications.
     */
    data: PerformerApplicationCreateManyInput | PerformerApplicationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PerformerApplication update
   */
  export type PerformerApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a PerformerApplication.
     */
    data: XOR<PerformerApplicationUpdateInput, PerformerApplicationUncheckedUpdateInput>
    /**
     * Choose, which PerformerApplication to update.
     */
    where: PerformerApplicationWhereUniqueInput
  }

  /**
   * PerformerApplication updateMany
   */
  export type PerformerApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PerformerApplications.
     */
    data: XOR<PerformerApplicationUpdateManyMutationInput, PerformerApplicationUncheckedUpdateManyInput>
    /**
     * Filter which PerformerApplications to update
     */
    where?: PerformerApplicationWhereInput
  }

  /**
   * PerformerApplication upsert
   */
  export type PerformerApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the PerformerApplication to update in case it exists.
     */
    where: PerformerApplicationWhereUniqueInput
    /**
     * In case the PerformerApplication found by the `where` argument doesn't exist, create a new PerformerApplication with this data.
     */
    create: XOR<PerformerApplicationCreateInput, PerformerApplicationUncheckedCreateInput>
    /**
     * In case the PerformerApplication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PerformerApplicationUpdateInput, PerformerApplicationUncheckedUpdateInput>
  }

  /**
   * PerformerApplication delete
   */
  export type PerformerApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    /**
     * Filter which PerformerApplication to delete.
     */
    where: PerformerApplicationWhereUniqueInput
  }

  /**
   * PerformerApplication deleteMany
   */
  export type PerformerApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PerformerApplications to delete
     */
    where?: PerformerApplicationWhereInput
  }

  /**
   * PerformerApplication.event
   */
  export type PerformerApplication$eventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
  }

  /**
   * PerformerApplication.adminNotes
   */
  export type PerformerApplication$adminNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    where?: ApplicationNoteWhereInput
    orderBy?: ApplicationNoteOrderByWithRelationInput | ApplicationNoteOrderByWithRelationInput[]
    cursor?: ApplicationNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationNoteScalarFieldEnum | ApplicationNoteScalarFieldEnum[]
  }

  /**
   * PerformerApplication without action
   */
  export type PerformerApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
  }


  /**
   * Model ApplicationNote
   */

  export type AggregateApplicationNote = {
    _count: ApplicationNoteCountAggregateOutputType | null
    _min: ApplicationNoteMinAggregateOutputType | null
    _max: ApplicationNoteMaxAggregateOutputType | null
  }

  export type ApplicationNoteMinAggregateOutputType = {
    id: string | null
    content: string | null
    adminName: string | null
    createdAt: Date | null
    stallApplicationId: string | null
    performerApplicationId: string | null
  }

  export type ApplicationNoteMaxAggregateOutputType = {
    id: string | null
    content: string | null
    adminName: string | null
    createdAt: Date | null
    stallApplicationId: string | null
    performerApplicationId: string | null
  }

  export type ApplicationNoteCountAggregateOutputType = {
    id: number
    content: number
    adminName: number
    createdAt: number
    stallApplicationId: number
    performerApplicationId: number
    _all: number
  }


  export type ApplicationNoteMinAggregateInputType = {
    id?: true
    content?: true
    adminName?: true
    createdAt?: true
    stallApplicationId?: true
    performerApplicationId?: true
  }

  export type ApplicationNoteMaxAggregateInputType = {
    id?: true
    content?: true
    adminName?: true
    createdAt?: true
    stallApplicationId?: true
    performerApplicationId?: true
  }

  export type ApplicationNoteCountAggregateInputType = {
    id?: true
    content?: true
    adminName?: true
    createdAt?: true
    stallApplicationId?: true
    performerApplicationId?: true
    _all?: true
  }

  export type ApplicationNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationNote to aggregate.
     */
    where?: ApplicationNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationNotes to fetch.
     */
    orderBy?: ApplicationNoteOrderByWithRelationInput | ApplicationNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicationNotes
    **/
    _count?: true | ApplicationNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationNoteMaxAggregateInputType
  }

  export type GetApplicationNoteAggregateType<T extends ApplicationNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicationNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicationNote[P]>
      : GetScalarType<T[P], AggregateApplicationNote[P]>
  }




  export type ApplicationNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationNoteWhereInput
    orderBy?: ApplicationNoteOrderByWithAggregationInput | ApplicationNoteOrderByWithAggregationInput[]
    by: ApplicationNoteScalarFieldEnum[] | ApplicationNoteScalarFieldEnum
    having?: ApplicationNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationNoteCountAggregateInputType | true
    _min?: ApplicationNoteMinAggregateInputType
    _max?: ApplicationNoteMaxAggregateInputType
  }

  export type ApplicationNoteGroupByOutputType = {
    id: string
    content: string
    adminName: string
    createdAt: Date
    stallApplicationId: string | null
    performerApplicationId: string | null
    _count: ApplicationNoteCountAggregateOutputType | null
    _min: ApplicationNoteMinAggregateOutputType | null
    _max: ApplicationNoteMaxAggregateOutputType | null
  }

  type GetApplicationNoteGroupByPayload<T extends ApplicationNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationNoteGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationNoteGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    adminName?: boolean
    createdAt?: boolean
    stallApplicationId?: boolean
    performerApplicationId?: boolean
    stallApplication?: boolean | ApplicationNote$stallApplicationArgs<ExtArgs>
    performerApplication?: boolean | ApplicationNote$performerApplicationArgs<ExtArgs>
  }, ExtArgs["result"]["applicationNote"]>

  export type ApplicationNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    adminName?: boolean
    createdAt?: boolean
    stallApplicationId?: boolean
    performerApplicationId?: boolean
    stallApplication?: boolean | ApplicationNote$stallApplicationArgs<ExtArgs>
    performerApplication?: boolean | ApplicationNote$performerApplicationArgs<ExtArgs>
  }, ExtArgs["result"]["applicationNote"]>

  export type ApplicationNoteSelectScalar = {
    id?: boolean
    content?: boolean
    adminName?: boolean
    createdAt?: boolean
    stallApplicationId?: boolean
    performerApplicationId?: boolean
  }

  export type ApplicationNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stallApplication?: boolean | ApplicationNote$stallApplicationArgs<ExtArgs>
    performerApplication?: boolean | ApplicationNote$performerApplicationArgs<ExtArgs>
  }
  export type ApplicationNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stallApplication?: boolean | ApplicationNote$stallApplicationArgs<ExtArgs>
    performerApplication?: boolean | ApplicationNote$performerApplicationArgs<ExtArgs>
  }

  export type $ApplicationNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApplicationNote"
    objects: {
      stallApplication: Prisma.$StallApplicationPayload<ExtArgs> | null
      performerApplication: Prisma.$PerformerApplicationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      adminName: string
      createdAt: Date
      stallApplicationId: string | null
      performerApplicationId: string | null
    }, ExtArgs["result"]["applicationNote"]>
    composites: {}
  }

  type ApplicationNoteGetPayload<S extends boolean | null | undefined | ApplicationNoteDefaultArgs> = $Result.GetResult<Prisma.$ApplicationNotePayload, S>

  type ApplicationNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApplicationNoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApplicationNoteCountAggregateInputType | true
    }

  export interface ApplicationNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicationNote'], meta: { name: 'ApplicationNote' } }
    /**
     * Find zero or one ApplicationNote that matches the filter.
     * @param {ApplicationNoteFindUniqueArgs} args - Arguments to find a ApplicationNote
     * @example
     * // Get one ApplicationNote
     * const applicationNote = await prisma.applicationNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationNoteFindUniqueArgs>(args: SelectSubset<T, ApplicationNoteFindUniqueArgs<ExtArgs>>): Prisma__ApplicationNoteClient<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ApplicationNote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApplicationNoteFindUniqueOrThrowArgs} args - Arguments to find a ApplicationNote
     * @example
     * // Get one ApplicationNote
     * const applicationNote = await prisma.applicationNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationNoteClient<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ApplicationNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationNoteFindFirstArgs} args - Arguments to find a ApplicationNote
     * @example
     * // Get one ApplicationNote
     * const applicationNote = await prisma.applicationNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationNoteFindFirstArgs>(args?: SelectSubset<T, ApplicationNoteFindFirstArgs<ExtArgs>>): Prisma__ApplicationNoteClient<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ApplicationNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationNoteFindFirstOrThrowArgs} args - Arguments to find a ApplicationNote
     * @example
     * // Get one ApplicationNote
     * const applicationNote = await prisma.applicationNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationNoteClient<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ApplicationNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicationNotes
     * const applicationNotes = await prisma.applicationNote.findMany()
     * 
     * // Get first 10 ApplicationNotes
     * const applicationNotes = await prisma.applicationNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationNoteWithIdOnly = await prisma.applicationNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationNoteFindManyArgs>(args?: SelectSubset<T, ApplicationNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ApplicationNote.
     * @param {ApplicationNoteCreateArgs} args - Arguments to create a ApplicationNote.
     * @example
     * // Create one ApplicationNote
     * const ApplicationNote = await prisma.applicationNote.create({
     *   data: {
     *     // ... data to create a ApplicationNote
     *   }
     * })
     * 
     */
    create<T extends ApplicationNoteCreateArgs>(args: SelectSubset<T, ApplicationNoteCreateArgs<ExtArgs>>): Prisma__ApplicationNoteClient<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ApplicationNotes.
     * @param {ApplicationNoteCreateManyArgs} args - Arguments to create many ApplicationNotes.
     * @example
     * // Create many ApplicationNotes
     * const applicationNote = await prisma.applicationNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationNoteCreateManyArgs>(args?: SelectSubset<T, ApplicationNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApplicationNotes and returns the data saved in the database.
     * @param {ApplicationNoteCreateManyAndReturnArgs} args - Arguments to create many ApplicationNotes.
     * @example
     * // Create many ApplicationNotes
     * const applicationNote = await prisma.applicationNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApplicationNotes and only return the `id`
     * const applicationNoteWithIdOnly = await prisma.applicationNote.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ApplicationNote.
     * @param {ApplicationNoteDeleteArgs} args - Arguments to delete one ApplicationNote.
     * @example
     * // Delete one ApplicationNote
     * const ApplicationNote = await prisma.applicationNote.delete({
     *   where: {
     *     // ... filter to delete one ApplicationNote
     *   }
     * })
     * 
     */
    delete<T extends ApplicationNoteDeleteArgs>(args: SelectSubset<T, ApplicationNoteDeleteArgs<ExtArgs>>): Prisma__ApplicationNoteClient<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ApplicationNote.
     * @param {ApplicationNoteUpdateArgs} args - Arguments to update one ApplicationNote.
     * @example
     * // Update one ApplicationNote
     * const applicationNote = await prisma.applicationNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationNoteUpdateArgs>(args: SelectSubset<T, ApplicationNoteUpdateArgs<ExtArgs>>): Prisma__ApplicationNoteClient<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ApplicationNotes.
     * @param {ApplicationNoteDeleteManyArgs} args - Arguments to filter ApplicationNotes to delete.
     * @example
     * // Delete a few ApplicationNotes
     * const { count } = await prisma.applicationNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationNoteDeleteManyArgs>(args?: SelectSubset<T, ApplicationNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicationNotes
     * const applicationNote = await prisma.applicationNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationNoteUpdateManyArgs>(args: SelectSubset<T, ApplicationNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApplicationNote.
     * @param {ApplicationNoteUpsertArgs} args - Arguments to update or create a ApplicationNote.
     * @example
     * // Update or create a ApplicationNote
     * const applicationNote = await prisma.applicationNote.upsert({
     *   create: {
     *     // ... data to create a ApplicationNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicationNote we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationNoteUpsertArgs>(args: SelectSubset<T, ApplicationNoteUpsertArgs<ExtArgs>>): Prisma__ApplicationNoteClient<$Result.GetResult<Prisma.$ApplicationNotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ApplicationNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationNoteCountArgs} args - Arguments to filter ApplicationNotes to count.
     * @example
     * // Count the number of ApplicationNotes
     * const count = await prisma.applicationNote.count({
     *   where: {
     *     // ... the filter for the ApplicationNotes we want to count
     *   }
     * })
    **/
    count<T extends ApplicationNoteCountArgs>(
      args?: Subset<T, ApplicationNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicationNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationNoteAggregateArgs>(args: Subset<T, ApplicationNoteAggregateArgs>): Prisma.PrismaPromise<GetApplicationNoteAggregateType<T>>

    /**
     * Group by ApplicationNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationNoteGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApplicationNote model
   */
  readonly fields: ApplicationNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicationNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stallApplication<T extends ApplicationNote$stallApplicationArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationNote$stallApplicationArgs<ExtArgs>>): Prisma__StallApplicationClient<$Result.GetResult<Prisma.$StallApplicationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    performerApplication<T extends ApplicationNote$performerApplicationArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationNote$performerApplicationArgs<ExtArgs>>): Prisma__PerformerApplicationClient<$Result.GetResult<Prisma.$PerformerApplicationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApplicationNote model
   */ 
  interface ApplicationNoteFieldRefs {
    readonly id: FieldRef<"ApplicationNote", 'String'>
    readonly content: FieldRef<"ApplicationNote", 'String'>
    readonly adminName: FieldRef<"ApplicationNote", 'String'>
    readonly createdAt: FieldRef<"ApplicationNote", 'DateTime'>
    readonly stallApplicationId: FieldRef<"ApplicationNote", 'String'>
    readonly performerApplicationId: FieldRef<"ApplicationNote", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ApplicationNote findUnique
   */
  export type ApplicationNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationNote to fetch.
     */
    where: ApplicationNoteWhereUniqueInput
  }

  /**
   * ApplicationNote findUniqueOrThrow
   */
  export type ApplicationNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationNote to fetch.
     */
    where: ApplicationNoteWhereUniqueInput
  }

  /**
   * ApplicationNote findFirst
   */
  export type ApplicationNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationNote to fetch.
     */
    where?: ApplicationNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationNotes to fetch.
     */
    orderBy?: ApplicationNoteOrderByWithRelationInput | ApplicationNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationNotes.
     */
    cursor?: ApplicationNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationNotes.
     */
    distinct?: ApplicationNoteScalarFieldEnum | ApplicationNoteScalarFieldEnum[]
  }

  /**
   * ApplicationNote findFirstOrThrow
   */
  export type ApplicationNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationNote to fetch.
     */
    where?: ApplicationNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationNotes to fetch.
     */
    orderBy?: ApplicationNoteOrderByWithRelationInput | ApplicationNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationNotes.
     */
    cursor?: ApplicationNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationNotes.
     */
    distinct?: ApplicationNoteScalarFieldEnum | ApplicationNoteScalarFieldEnum[]
  }

  /**
   * ApplicationNote findMany
   */
  export type ApplicationNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationNotes to fetch.
     */
    where?: ApplicationNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationNotes to fetch.
     */
    orderBy?: ApplicationNoteOrderByWithRelationInput | ApplicationNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicationNotes.
     */
    cursor?: ApplicationNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationNotes.
     */
    skip?: number
    distinct?: ApplicationNoteScalarFieldEnum | ApplicationNoteScalarFieldEnum[]
  }

  /**
   * ApplicationNote create
   */
  export type ApplicationNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a ApplicationNote.
     */
    data: XOR<ApplicationNoteCreateInput, ApplicationNoteUncheckedCreateInput>
  }

  /**
   * ApplicationNote createMany
   */
  export type ApplicationNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApplicationNotes.
     */
    data: ApplicationNoteCreateManyInput | ApplicationNoteCreateManyInput[]
  }

  /**
   * ApplicationNote createManyAndReturn
   */
  export type ApplicationNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ApplicationNotes.
     */
    data: ApplicationNoteCreateManyInput | ApplicationNoteCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationNote update
   */
  export type ApplicationNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a ApplicationNote.
     */
    data: XOR<ApplicationNoteUpdateInput, ApplicationNoteUncheckedUpdateInput>
    /**
     * Choose, which ApplicationNote to update.
     */
    where: ApplicationNoteWhereUniqueInput
  }

  /**
   * ApplicationNote updateMany
   */
  export type ApplicationNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApplicationNotes.
     */
    data: XOR<ApplicationNoteUpdateManyMutationInput, ApplicationNoteUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationNotes to update
     */
    where?: ApplicationNoteWhereInput
  }

  /**
   * ApplicationNote upsert
   */
  export type ApplicationNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the ApplicationNote to update in case it exists.
     */
    where: ApplicationNoteWhereUniqueInput
    /**
     * In case the ApplicationNote found by the `where` argument doesn't exist, create a new ApplicationNote with this data.
     */
    create: XOR<ApplicationNoteCreateInput, ApplicationNoteUncheckedCreateInput>
    /**
     * In case the ApplicationNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationNoteUpdateInput, ApplicationNoteUncheckedUpdateInput>
  }

  /**
   * ApplicationNote delete
   */
  export type ApplicationNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
    /**
     * Filter which ApplicationNote to delete.
     */
    where: ApplicationNoteWhereUniqueInput
  }

  /**
   * ApplicationNote deleteMany
   */
  export type ApplicationNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationNotes to delete
     */
    where?: ApplicationNoteWhereInput
  }

  /**
   * ApplicationNote.stallApplication
   */
  export type ApplicationNote$stallApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StallApplication
     */
    select?: StallApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StallApplicationInclude<ExtArgs> | null
    where?: StallApplicationWhereInput
  }

  /**
   * ApplicationNote.performerApplication
   */
  export type ApplicationNote$performerApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PerformerApplication
     */
    select?: PerformerApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PerformerApplicationInclude<ExtArgs> | null
    where?: PerformerApplicationWhereInput
  }

  /**
   * ApplicationNote without action
   */
  export type ApplicationNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationNote
     */
    select?: ApplicationNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationNoteInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VolunteerScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    orgName: 'orgName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    skills: 'skills',
    interests: 'interests',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type VolunteerScalarFieldEnum = (typeof VolunteerScalarFieldEnum)[keyof typeof VolunteerScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    date: 'date',
    applicationStartDate: 'applicationStartDate',
    location: 'location',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const SignupScalarFieldEnum: {
    id: 'id',
    volunteerId: 'volunteerId',
    eventId: 'eventId',
    role: 'role',
    detailsJson: 'detailsJson',
    availability: 'availability',
    freq: 'freq',
    status: 'status',
    memo: 'memo',
    createdAt: 'createdAt'
  };

  export type SignupScalarFieldEnum = (typeof SignupScalarFieldEnum)[keyof typeof SignupScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    kind: 'kind'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const VolunteerTagScalarFieldEnum: {
    volunteerId: 'volunteerId',
    tagId: 'tagId'
  };

  export type VolunteerTagScalarFieldEnum = (typeof VolunteerTagScalarFieldEnum)[keyof typeof VolunteerTagScalarFieldEnum]


  export const StallApplicationScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    representative: 'representative',
    address: 'address',
    email: 'email',
    phone: 'phone',
    boothType: 'boothType',
    items: 'items',
    priceRangeMin: 'priceRangeMin',
    priceRangeMax: 'priceRangeMax',
    boothCount: 'boothCount',
    tentWidth: 'tentWidth',
    tentDepth: 'tentDepth',
    tentHeight: 'tentHeight',
    vehicleCount: 'vehicleCount',
    rentalTables: 'rentalTables',
    rentalChairs: 'rentalChairs',
    questions: 'questions',
    eventId: 'eventId',
    createdAt: 'createdAt'
  };

  export type StallApplicationScalarFieldEnum = (typeof StallApplicationScalarFieldEnum)[keyof typeof StallApplicationScalarFieldEnum]


  export const PerformerApplicationScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    representative: 'representative',
    address: 'address',
    email: 'email',
    phone: 'phone',
    performance: 'performance',
    performerCount: 'performerCount',
    slotCount: 'slotCount',
    vehicleCount: 'vehicleCount',
    rentalAmp: 'rentalAmp',
    rentalMic: 'rentalMic',
    questions: 'questions',
    eventId: 'eventId',
    createdAt: 'createdAt'
  };

  export type PerformerApplicationScalarFieldEnum = (typeof PerformerApplicationScalarFieldEnum)[keyof typeof PerformerApplicationScalarFieldEnum]


  export const ApplicationNoteScalarFieldEnum: {
    id: 'id',
    content: 'content',
    adminName: 'adminName',
    createdAt: 'createdAt',
    stallApplicationId: 'stallApplicationId',
    performerApplicationId: 'performerApplicationId'
  };

  export type ApplicationNoteScalarFieldEnum = (typeof ApplicationNoteScalarFieldEnum)[keyof typeof ApplicationNoteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type VolunteerWhereInput = {
    AND?: VolunteerWhereInput | VolunteerWhereInput[]
    OR?: VolunteerWhereInput[]
    NOT?: VolunteerWhereInput | VolunteerWhereInput[]
    id?: StringFilter<"Volunteer"> | string
    type?: StringFilter<"Volunteer"> | string
    name?: StringFilter<"Volunteer"> | string
    orgName?: StringNullableFilter<"Volunteer"> | string | null
    email?: StringFilter<"Volunteer"> | string
    phone?: StringNullableFilter<"Volunteer"> | string | null
    address?: StringNullableFilter<"Volunteer"> | string | null
    skills?: StringFilter<"Volunteer"> | string
    interests?: StringFilter<"Volunteer"> | string
    notes?: StringNullableFilter<"Volunteer"> | string | null
    createdAt?: DateTimeFilter<"Volunteer"> | Date | string
    signups?: SignupListRelationFilter
    volunteerTags?: VolunteerTagListRelationFilter
  }

  export type VolunteerOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    orgName?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    skills?: SortOrder
    interests?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    signups?: SignupOrderByRelationAggregateInput
    volunteerTags?: VolunteerTagOrderByRelationAggregateInput
  }

  export type VolunteerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email_name?: VolunteerEmailNameCompoundUniqueInput
    AND?: VolunteerWhereInput | VolunteerWhereInput[]
    OR?: VolunteerWhereInput[]
    NOT?: VolunteerWhereInput | VolunteerWhereInput[]
    type?: StringFilter<"Volunteer"> | string
    name?: StringFilter<"Volunteer"> | string
    orgName?: StringNullableFilter<"Volunteer"> | string | null
    email?: StringFilter<"Volunteer"> | string
    phone?: StringNullableFilter<"Volunteer"> | string | null
    address?: StringNullableFilter<"Volunteer"> | string | null
    skills?: StringFilter<"Volunteer"> | string
    interests?: StringFilter<"Volunteer"> | string
    notes?: StringNullableFilter<"Volunteer"> | string | null
    createdAt?: DateTimeFilter<"Volunteer"> | Date | string
    signups?: SignupListRelationFilter
    volunteerTags?: VolunteerTagListRelationFilter
  }, "id" | "email_name">

  export type VolunteerOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    orgName?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    skills?: SortOrder
    interests?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: VolunteerCountOrderByAggregateInput
    _max?: VolunteerMaxOrderByAggregateInput
    _min?: VolunteerMinOrderByAggregateInput
  }

  export type VolunteerScalarWhereWithAggregatesInput = {
    AND?: VolunteerScalarWhereWithAggregatesInput | VolunteerScalarWhereWithAggregatesInput[]
    OR?: VolunteerScalarWhereWithAggregatesInput[]
    NOT?: VolunteerScalarWhereWithAggregatesInput | VolunteerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Volunteer"> | string
    type?: StringWithAggregatesFilter<"Volunteer"> | string
    name?: StringWithAggregatesFilter<"Volunteer"> | string
    orgName?: StringNullableWithAggregatesFilter<"Volunteer"> | string | null
    email?: StringWithAggregatesFilter<"Volunteer"> | string
    phone?: StringNullableWithAggregatesFilter<"Volunteer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Volunteer"> | string | null
    skills?: StringWithAggregatesFilter<"Volunteer"> | string
    interests?: StringWithAggregatesFilter<"Volunteer"> | string
    notes?: StringNullableWithAggregatesFilter<"Volunteer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Volunteer"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    slug?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    applicationStartDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    location?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    signups?: SignupListRelationFilter
    stallApplications?: StallApplicationListRelationFilter
    performerApplications?: PerformerApplicationListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    date?: SortOrder
    applicationStartDate?: SortOrderInput | SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    signups?: SignupOrderByRelationAggregateInput
    stallApplications?: StallApplicationOrderByRelationAggregateInput
    performerApplications?: PerformerApplicationOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    date?: DateTimeFilter<"Event"> | Date | string
    applicationStartDate?: DateTimeNullableFilter<"Event"> | Date | string | null
    location?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    createdAt?: DateTimeFilter<"Event"> | Date | string
    signups?: SignupListRelationFilter
    stallApplications?: StallApplicationListRelationFilter
    performerApplications?: PerformerApplicationListRelationFilter
  }, "id" | "slug">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    date?: SortOrder
    applicationStartDate?: SortOrderInput | SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    slug?: StringWithAggregatesFilter<"Event"> | string
    date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    applicationStartDate?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
    location?: StringWithAggregatesFilter<"Event"> | string
    description?: StringWithAggregatesFilter<"Event"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type SignupWhereInput = {
    AND?: SignupWhereInput | SignupWhereInput[]
    OR?: SignupWhereInput[]
    NOT?: SignupWhereInput | SignupWhereInput[]
    id?: StringFilter<"Signup"> | string
    volunteerId?: StringFilter<"Signup"> | string
    eventId?: StringFilter<"Signup"> | string
    role?: StringFilter<"Signup"> | string
    detailsJson?: StringFilter<"Signup"> | string
    availability?: StringNullableFilter<"Signup"> | string | null
    freq?: StringFilter<"Signup"> | string
    status?: StringFilter<"Signup"> | string
    memo?: StringNullableFilter<"Signup"> | string | null
    createdAt?: DateTimeFilter<"Signup"> | Date | string
    volunteer?: XOR<VolunteerRelationFilter, VolunteerWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }

  export type SignupOrderByWithRelationInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    eventId?: SortOrder
    role?: SortOrder
    detailsJson?: SortOrder
    availability?: SortOrderInput | SortOrder
    freq?: SortOrder
    status?: SortOrder
    memo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    volunteer?: VolunteerOrderByWithRelationInput
    event?: EventOrderByWithRelationInput
  }

  export type SignupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SignupWhereInput | SignupWhereInput[]
    OR?: SignupWhereInput[]
    NOT?: SignupWhereInput | SignupWhereInput[]
    volunteerId?: StringFilter<"Signup"> | string
    eventId?: StringFilter<"Signup"> | string
    role?: StringFilter<"Signup"> | string
    detailsJson?: StringFilter<"Signup"> | string
    availability?: StringNullableFilter<"Signup"> | string | null
    freq?: StringFilter<"Signup"> | string
    status?: StringFilter<"Signup"> | string
    memo?: StringNullableFilter<"Signup"> | string | null
    createdAt?: DateTimeFilter<"Signup"> | Date | string
    volunteer?: XOR<VolunteerRelationFilter, VolunteerWhereInput>
    event?: XOR<EventRelationFilter, EventWhereInput>
  }, "id">

  export type SignupOrderByWithAggregationInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    eventId?: SortOrder
    role?: SortOrder
    detailsJson?: SortOrder
    availability?: SortOrderInput | SortOrder
    freq?: SortOrder
    status?: SortOrder
    memo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SignupCountOrderByAggregateInput
    _max?: SignupMaxOrderByAggregateInput
    _min?: SignupMinOrderByAggregateInput
  }

  export type SignupScalarWhereWithAggregatesInput = {
    AND?: SignupScalarWhereWithAggregatesInput | SignupScalarWhereWithAggregatesInput[]
    OR?: SignupScalarWhereWithAggregatesInput[]
    NOT?: SignupScalarWhereWithAggregatesInput | SignupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Signup"> | string
    volunteerId?: StringWithAggregatesFilter<"Signup"> | string
    eventId?: StringWithAggregatesFilter<"Signup"> | string
    role?: StringWithAggregatesFilter<"Signup"> | string
    detailsJson?: StringWithAggregatesFilter<"Signup"> | string
    availability?: StringNullableWithAggregatesFilter<"Signup"> | string | null
    freq?: StringWithAggregatesFilter<"Signup"> | string
    status?: StringWithAggregatesFilter<"Signup"> | string
    memo?: StringNullableWithAggregatesFilter<"Signup"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Signup"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    kind?: StringFilter<"Tag"> | string
    volunteerTags?: VolunteerTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    kind?: SortOrder
    volunteerTags?: VolunteerTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    kind?: StringFilter<"Tag"> | string
    volunteerTags?: VolunteerTagListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    kind?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    kind?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type VolunteerTagWhereInput = {
    AND?: VolunteerTagWhereInput | VolunteerTagWhereInput[]
    OR?: VolunteerTagWhereInput[]
    NOT?: VolunteerTagWhereInput | VolunteerTagWhereInput[]
    volunteerId?: StringFilter<"VolunteerTag"> | string
    tagId?: StringFilter<"VolunteerTag"> | string
    volunteer?: XOR<VolunteerRelationFilter, VolunteerWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }

  export type VolunteerTagOrderByWithRelationInput = {
    volunteerId?: SortOrder
    tagId?: SortOrder
    volunteer?: VolunteerOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type VolunteerTagWhereUniqueInput = Prisma.AtLeast<{
    volunteerId_tagId?: VolunteerTagVolunteerIdTagIdCompoundUniqueInput
    AND?: VolunteerTagWhereInput | VolunteerTagWhereInput[]
    OR?: VolunteerTagWhereInput[]
    NOT?: VolunteerTagWhereInput | VolunteerTagWhereInput[]
    volunteerId?: StringFilter<"VolunteerTag"> | string
    tagId?: StringFilter<"VolunteerTag"> | string
    volunteer?: XOR<VolunteerRelationFilter, VolunteerWhereInput>
    tag?: XOR<TagRelationFilter, TagWhereInput>
  }, "volunteerId_tagId">

  export type VolunteerTagOrderByWithAggregationInput = {
    volunteerId?: SortOrder
    tagId?: SortOrder
    _count?: VolunteerTagCountOrderByAggregateInput
    _max?: VolunteerTagMaxOrderByAggregateInput
    _min?: VolunteerTagMinOrderByAggregateInput
  }

  export type VolunteerTagScalarWhereWithAggregatesInput = {
    AND?: VolunteerTagScalarWhereWithAggregatesInput | VolunteerTagScalarWhereWithAggregatesInput[]
    OR?: VolunteerTagScalarWhereWithAggregatesInput[]
    NOT?: VolunteerTagScalarWhereWithAggregatesInput | VolunteerTagScalarWhereWithAggregatesInput[]
    volunteerId?: StringWithAggregatesFilter<"VolunteerTag"> | string
    tagId?: StringWithAggregatesFilter<"VolunteerTag"> | string
  }

  export type StallApplicationWhereInput = {
    AND?: StallApplicationWhereInput | StallApplicationWhereInput[]
    OR?: StallApplicationWhereInput[]
    NOT?: StallApplicationWhereInput | StallApplicationWhereInput[]
    id?: StringFilter<"StallApplication"> | string
    groupName?: StringFilter<"StallApplication"> | string
    representative?: StringFilter<"StallApplication"> | string
    address?: StringNullableFilter<"StallApplication"> | string | null
    email?: StringFilter<"StallApplication"> | string
    phone?: StringFilter<"StallApplication"> | string
    boothType?: StringFilter<"StallApplication"> | string
    items?: StringNullableFilter<"StallApplication"> | string | null
    priceRangeMin?: IntNullableFilter<"StallApplication"> | number | null
    priceRangeMax?: IntNullableFilter<"StallApplication"> | number | null
    boothCount?: IntNullableFilter<"StallApplication"> | number | null
    tentWidth?: FloatNullableFilter<"StallApplication"> | number | null
    tentDepth?: FloatNullableFilter<"StallApplication"> | number | null
    tentHeight?: FloatNullableFilter<"StallApplication"> | number | null
    vehicleCount?: IntNullableFilter<"StallApplication"> | number | null
    rentalTables?: IntNullableFilter<"StallApplication"> | number | null
    rentalChairs?: IntNullableFilter<"StallApplication"> | number | null
    questions?: StringNullableFilter<"StallApplication"> | string | null
    eventId?: StringNullableFilter<"StallApplication"> | string | null
    createdAt?: DateTimeFilter<"StallApplication"> | Date | string
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    adminNotes?: ApplicationNoteListRelationFilter
  }

  export type StallApplicationOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    boothType?: SortOrder
    items?: SortOrderInput | SortOrder
    priceRangeMin?: SortOrderInput | SortOrder
    priceRangeMax?: SortOrderInput | SortOrder
    boothCount?: SortOrderInput | SortOrder
    tentWidth?: SortOrderInput | SortOrder
    tentDepth?: SortOrderInput | SortOrder
    tentHeight?: SortOrderInput | SortOrder
    vehicleCount?: SortOrderInput | SortOrder
    rentalTables?: SortOrderInput | SortOrder
    rentalChairs?: SortOrderInput | SortOrder
    questions?: SortOrderInput | SortOrder
    eventId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    adminNotes?: ApplicationNoteOrderByRelationAggregateInput
  }

  export type StallApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StallApplicationWhereInput | StallApplicationWhereInput[]
    OR?: StallApplicationWhereInput[]
    NOT?: StallApplicationWhereInput | StallApplicationWhereInput[]
    groupName?: StringFilter<"StallApplication"> | string
    representative?: StringFilter<"StallApplication"> | string
    address?: StringNullableFilter<"StallApplication"> | string | null
    email?: StringFilter<"StallApplication"> | string
    phone?: StringFilter<"StallApplication"> | string
    boothType?: StringFilter<"StallApplication"> | string
    items?: StringNullableFilter<"StallApplication"> | string | null
    priceRangeMin?: IntNullableFilter<"StallApplication"> | number | null
    priceRangeMax?: IntNullableFilter<"StallApplication"> | number | null
    boothCount?: IntNullableFilter<"StallApplication"> | number | null
    tentWidth?: FloatNullableFilter<"StallApplication"> | number | null
    tentDepth?: FloatNullableFilter<"StallApplication"> | number | null
    tentHeight?: FloatNullableFilter<"StallApplication"> | number | null
    vehicleCount?: IntNullableFilter<"StallApplication"> | number | null
    rentalTables?: IntNullableFilter<"StallApplication"> | number | null
    rentalChairs?: IntNullableFilter<"StallApplication"> | number | null
    questions?: StringNullableFilter<"StallApplication"> | string | null
    eventId?: StringNullableFilter<"StallApplication"> | string | null
    createdAt?: DateTimeFilter<"StallApplication"> | Date | string
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    adminNotes?: ApplicationNoteListRelationFilter
  }, "id">

  export type StallApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    boothType?: SortOrder
    items?: SortOrderInput | SortOrder
    priceRangeMin?: SortOrderInput | SortOrder
    priceRangeMax?: SortOrderInput | SortOrder
    boothCount?: SortOrderInput | SortOrder
    tentWidth?: SortOrderInput | SortOrder
    tentDepth?: SortOrderInput | SortOrder
    tentHeight?: SortOrderInput | SortOrder
    vehicleCount?: SortOrderInput | SortOrder
    rentalTables?: SortOrderInput | SortOrder
    rentalChairs?: SortOrderInput | SortOrder
    questions?: SortOrderInput | SortOrder
    eventId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StallApplicationCountOrderByAggregateInput
    _avg?: StallApplicationAvgOrderByAggregateInput
    _max?: StallApplicationMaxOrderByAggregateInput
    _min?: StallApplicationMinOrderByAggregateInput
    _sum?: StallApplicationSumOrderByAggregateInput
  }

  export type StallApplicationScalarWhereWithAggregatesInput = {
    AND?: StallApplicationScalarWhereWithAggregatesInput | StallApplicationScalarWhereWithAggregatesInput[]
    OR?: StallApplicationScalarWhereWithAggregatesInput[]
    NOT?: StallApplicationScalarWhereWithAggregatesInput | StallApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StallApplication"> | string
    groupName?: StringWithAggregatesFilter<"StallApplication"> | string
    representative?: StringWithAggregatesFilter<"StallApplication"> | string
    address?: StringNullableWithAggregatesFilter<"StallApplication"> | string | null
    email?: StringWithAggregatesFilter<"StallApplication"> | string
    phone?: StringWithAggregatesFilter<"StallApplication"> | string
    boothType?: StringWithAggregatesFilter<"StallApplication"> | string
    items?: StringNullableWithAggregatesFilter<"StallApplication"> | string | null
    priceRangeMin?: IntNullableWithAggregatesFilter<"StallApplication"> | number | null
    priceRangeMax?: IntNullableWithAggregatesFilter<"StallApplication"> | number | null
    boothCount?: IntNullableWithAggregatesFilter<"StallApplication"> | number | null
    tentWidth?: FloatNullableWithAggregatesFilter<"StallApplication"> | number | null
    tentDepth?: FloatNullableWithAggregatesFilter<"StallApplication"> | number | null
    tentHeight?: FloatNullableWithAggregatesFilter<"StallApplication"> | number | null
    vehicleCount?: IntNullableWithAggregatesFilter<"StallApplication"> | number | null
    rentalTables?: IntNullableWithAggregatesFilter<"StallApplication"> | number | null
    rentalChairs?: IntNullableWithAggregatesFilter<"StallApplication"> | number | null
    questions?: StringNullableWithAggregatesFilter<"StallApplication"> | string | null
    eventId?: StringNullableWithAggregatesFilter<"StallApplication"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StallApplication"> | Date | string
  }

  export type PerformerApplicationWhereInput = {
    AND?: PerformerApplicationWhereInput | PerformerApplicationWhereInput[]
    OR?: PerformerApplicationWhereInput[]
    NOT?: PerformerApplicationWhereInput | PerformerApplicationWhereInput[]
    id?: StringFilter<"PerformerApplication"> | string
    groupName?: StringFilter<"PerformerApplication"> | string
    representative?: StringFilter<"PerformerApplication"> | string
    address?: StringNullableFilter<"PerformerApplication"> | string | null
    email?: StringFilter<"PerformerApplication"> | string
    phone?: StringFilter<"PerformerApplication"> | string
    performance?: StringFilter<"PerformerApplication"> | string
    performerCount?: IntNullableFilter<"PerformerApplication"> | number | null
    slotCount?: IntNullableFilter<"PerformerApplication"> | number | null
    vehicleCount?: IntNullableFilter<"PerformerApplication"> | number | null
    rentalAmp?: IntNullableFilter<"PerformerApplication"> | number | null
    rentalMic?: IntNullableFilter<"PerformerApplication"> | number | null
    questions?: StringNullableFilter<"PerformerApplication"> | string | null
    eventId?: StringNullableFilter<"PerformerApplication"> | string | null
    createdAt?: DateTimeFilter<"PerformerApplication"> | Date | string
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    adminNotes?: ApplicationNoteListRelationFilter
  }

  export type PerformerApplicationOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    performance?: SortOrder
    performerCount?: SortOrderInput | SortOrder
    slotCount?: SortOrderInput | SortOrder
    vehicleCount?: SortOrderInput | SortOrder
    rentalAmp?: SortOrderInput | SortOrder
    rentalMic?: SortOrderInput | SortOrder
    questions?: SortOrderInput | SortOrder
    eventId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    adminNotes?: ApplicationNoteOrderByRelationAggregateInput
  }

  export type PerformerApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PerformerApplicationWhereInput | PerformerApplicationWhereInput[]
    OR?: PerformerApplicationWhereInput[]
    NOT?: PerformerApplicationWhereInput | PerformerApplicationWhereInput[]
    groupName?: StringFilter<"PerformerApplication"> | string
    representative?: StringFilter<"PerformerApplication"> | string
    address?: StringNullableFilter<"PerformerApplication"> | string | null
    email?: StringFilter<"PerformerApplication"> | string
    phone?: StringFilter<"PerformerApplication"> | string
    performance?: StringFilter<"PerformerApplication"> | string
    performerCount?: IntNullableFilter<"PerformerApplication"> | number | null
    slotCount?: IntNullableFilter<"PerformerApplication"> | number | null
    vehicleCount?: IntNullableFilter<"PerformerApplication"> | number | null
    rentalAmp?: IntNullableFilter<"PerformerApplication"> | number | null
    rentalMic?: IntNullableFilter<"PerformerApplication"> | number | null
    questions?: StringNullableFilter<"PerformerApplication"> | string | null
    eventId?: StringNullableFilter<"PerformerApplication"> | string | null
    createdAt?: DateTimeFilter<"PerformerApplication"> | Date | string
    event?: XOR<EventNullableRelationFilter, EventWhereInput> | null
    adminNotes?: ApplicationNoteListRelationFilter
  }, "id">

  export type PerformerApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    performance?: SortOrder
    performerCount?: SortOrderInput | SortOrder
    slotCount?: SortOrderInput | SortOrder
    vehicleCount?: SortOrderInput | SortOrder
    rentalAmp?: SortOrderInput | SortOrder
    rentalMic?: SortOrderInput | SortOrder
    questions?: SortOrderInput | SortOrder
    eventId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PerformerApplicationCountOrderByAggregateInput
    _avg?: PerformerApplicationAvgOrderByAggregateInput
    _max?: PerformerApplicationMaxOrderByAggregateInput
    _min?: PerformerApplicationMinOrderByAggregateInput
    _sum?: PerformerApplicationSumOrderByAggregateInput
  }

  export type PerformerApplicationScalarWhereWithAggregatesInput = {
    AND?: PerformerApplicationScalarWhereWithAggregatesInput | PerformerApplicationScalarWhereWithAggregatesInput[]
    OR?: PerformerApplicationScalarWhereWithAggregatesInput[]
    NOT?: PerformerApplicationScalarWhereWithAggregatesInput | PerformerApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PerformerApplication"> | string
    groupName?: StringWithAggregatesFilter<"PerformerApplication"> | string
    representative?: StringWithAggregatesFilter<"PerformerApplication"> | string
    address?: StringNullableWithAggregatesFilter<"PerformerApplication"> | string | null
    email?: StringWithAggregatesFilter<"PerformerApplication"> | string
    phone?: StringWithAggregatesFilter<"PerformerApplication"> | string
    performance?: StringWithAggregatesFilter<"PerformerApplication"> | string
    performerCount?: IntNullableWithAggregatesFilter<"PerformerApplication"> | number | null
    slotCount?: IntNullableWithAggregatesFilter<"PerformerApplication"> | number | null
    vehicleCount?: IntNullableWithAggregatesFilter<"PerformerApplication"> | number | null
    rentalAmp?: IntNullableWithAggregatesFilter<"PerformerApplication"> | number | null
    rentalMic?: IntNullableWithAggregatesFilter<"PerformerApplication"> | number | null
    questions?: StringNullableWithAggregatesFilter<"PerformerApplication"> | string | null
    eventId?: StringNullableWithAggregatesFilter<"PerformerApplication"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PerformerApplication"> | Date | string
  }

  export type ApplicationNoteWhereInput = {
    AND?: ApplicationNoteWhereInput | ApplicationNoteWhereInput[]
    OR?: ApplicationNoteWhereInput[]
    NOT?: ApplicationNoteWhereInput | ApplicationNoteWhereInput[]
    id?: StringFilter<"ApplicationNote"> | string
    content?: StringFilter<"ApplicationNote"> | string
    adminName?: StringFilter<"ApplicationNote"> | string
    createdAt?: DateTimeFilter<"ApplicationNote"> | Date | string
    stallApplicationId?: StringNullableFilter<"ApplicationNote"> | string | null
    performerApplicationId?: StringNullableFilter<"ApplicationNote"> | string | null
    stallApplication?: XOR<StallApplicationNullableRelationFilter, StallApplicationWhereInput> | null
    performerApplication?: XOR<PerformerApplicationNullableRelationFilter, PerformerApplicationWhereInput> | null
  }

  export type ApplicationNoteOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    adminName?: SortOrder
    createdAt?: SortOrder
    stallApplicationId?: SortOrderInput | SortOrder
    performerApplicationId?: SortOrderInput | SortOrder
    stallApplication?: StallApplicationOrderByWithRelationInput
    performerApplication?: PerformerApplicationOrderByWithRelationInput
  }

  export type ApplicationNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApplicationNoteWhereInput | ApplicationNoteWhereInput[]
    OR?: ApplicationNoteWhereInput[]
    NOT?: ApplicationNoteWhereInput | ApplicationNoteWhereInput[]
    content?: StringFilter<"ApplicationNote"> | string
    adminName?: StringFilter<"ApplicationNote"> | string
    createdAt?: DateTimeFilter<"ApplicationNote"> | Date | string
    stallApplicationId?: StringNullableFilter<"ApplicationNote"> | string | null
    performerApplicationId?: StringNullableFilter<"ApplicationNote"> | string | null
    stallApplication?: XOR<StallApplicationNullableRelationFilter, StallApplicationWhereInput> | null
    performerApplication?: XOR<PerformerApplicationNullableRelationFilter, PerformerApplicationWhereInput> | null
  }, "id">

  export type ApplicationNoteOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    adminName?: SortOrder
    createdAt?: SortOrder
    stallApplicationId?: SortOrderInput | SortOrder
    performerApplicationId?: SortOrderInput | SortOrder
    _count?: ApplicationNoteCountOrderByAggregateInput
    _max?: ApplicationNoteMaxOrderByAggregateInput
    _min?: ApplicationNoteMinOrderByAggregateInput
  }

  export type ApplicationNoteScalarWhereWithAggregatesInput = {
    AND?: ApplicationNoteScalarWhereWithAggregatesInput | ApplicationNoteScalarWhereWithAggregatesInput[]
    OR?: ApplicationNoteScalarWhereWithAggregatesInput[]
    NOT?: ApplicationNoteScalarWhereWithAggregatesInput | ApplicationNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApplicationNote"> | string
    content?: StringWithAggregatesFilter<"ApplicationNote"> | string
    adminName?: StringWithAggregatesFilter<"ApplicationNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ApplicationNote"> | Date | string
    stallApplicationId?: StringNullableWithAggregatesFilter<"ApplicationNote"> | string | null
    performerApplicationId?: StringNullableWithAggregatesFilter<"ApplicationNote"> | string | null
  }

  export type VolunteerCreateInput = {
    id?: string
    type: string
    name: string
    orgName?: string | null
    email: string
    phone?: string | null
    address?: string | null
    skills: string
    interests: string
    notes?: string | null
    createdAt?: Date | string
    signups?: SignupCreateNestedManyWithoutVolunteerInput
    volunteerTags?: VolunteerTagCreateNestedManyWithoutVolunteerInput
  }

  export type VolunteerUncheckedCreateInput = {
    id?: string
    type: string
    name: string
    orgName?: string | null
    email: string
    phone?: string | null
    address?: string | null
    skills: string
    interests: string
    notes?: string | null
    createdAt?: Date | string
    signups?: SignupUncheckedCreateNestedManyWithoutVolunteerInput
    volunteerTags?: VolunteerTagUncheckedCreateNestedManyWithoutVolunteerInput
  }

  export type VolunteerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orgName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: StringFieldUpdateOperationsInput | string
    interests?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUpdateManyWithoutVolunteerNestedInput
    volunteerTags?: VolunteerTagUpdateManyWithoutVolunteerNestedInput
  }

  export type VolunteerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orgName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: StringFieldUpdateOperationsInput | string
    interests?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUncheckedUpdateManyWithoutVolunteerNestedInput
    volunteerTags?: VolunteerTagUncheckedUpdateManyWithoutVolunteerNestedInput
  }

  export type VolunteerCreateManyInput = {
    id?: string
    type: string
    name: string
    orgName?: string | null
    email: string
    phone?: string | null
    address?: string | null
    skills: string
    interests: string
    notes?: string | null
    createdAt?: Date | string
  }

  export type VolunteerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orgName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: StringFieldUpdateOperationsInput | string
    interests?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orgName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: StringFieldUpdateOperationsInput | string
    interests?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
    signups?: SignupCreateNestedManyWithoutEventInput
    stallApplications?: StallApplicationCreateNestedManyWithoutEventInput
    performerApplications?: PerformerApplicationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
    signups?: SignupUncheckedCreateNestedManyWithoutEventInput
    stallApplications?: StallApplicationUncheckedCreateNestedManyWithoutEventInput
    performerApplications?: PerformerApplicationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUpdateManyWithoutEventNestedInput
    stallApplications?: StallApplicationUpdateManyWithoutEventNestedInput
    performerApplications?: PerformerApplicationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUncheckedUpdateManyWithoutEventNestedInput
    stallApplications?: StallApplicationUncheckedUpdateManyWithoutEventNestedInput
    performerApplications?: PerformerApplicationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignupCreateInput = {
    id?: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
    volunteer: VolunteerCreateNestedOneWithoutSignupsInput
    event: EventCreateNestedOneWithoutSignupsInput
  }

  export type SignupUncheckedCreateInput = {
    id?: string
    volunteerId: string
    eventId: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
  }

  export type SignupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    volunteer?: VolunteerUpdateOneRequiredWithoutSignupsNestedInput
    event?: EventUpdateOneRequiredWithoutSignupsNestedInput
  }

  export type SignupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignupCreateManyInput = {
    id?: string
    volunteerId: string
    eventId: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
  }

  export type SignupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    kind: string
    volunteerTags?: VolunteerTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    kind: string
    volunteerTags?: VolunteerTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    volunteerTags?: VolunteerTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
    volunteerTags?: VolunteerTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    kind: string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
  }

  export type VolunteerTagCreateInput = {
    volunteer: VolunteerCreateNestedOneWithoutVolunteerTagsInput
    tag: TagCreateNestedOneWithoutVolunteerTagsInput
  }

  export type VolunteerTagUncheckedCreateInput = {
    volunteerId: string
    tagId: string
  }

  export type VolunteerTagUpdateInput = {
    volunteer?: VolunteerUpdateOneRequiredWithoutVolunteerTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutVolunteerTagsNestedInput
  }

  export type VolunteerTagUncheckedUpdateInput = {
    volunteerId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type VolunteerTagCreateManyInput = {
    volunteerId: string
    tagId: string
  }

  export type VolunteerTagUpdateManyMutationInput = {

  }

  export type VolunteerTagUncheckedUpdateManyInput = {
    volunteerId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type StallApplicationCreateInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    boothType: string
    items?: string | null
    priceRangeMin?: number | null
    priceRangeMax?: number | null
    boothCount?: number | null
    tentWidth?: number | null
    tentDepth?: number | null
    tentHeight?: number | null
    vehicleCount?: number | null
    rentalTables?: number | null
    rentalChairs?: number | null
    questions?: string | null
    createdAt?: Date | string
    event?: EventCreateNestedOneWithoutStallApplicationsInput
    adminNotes?: ApplicationNoteCreateNestedManyWithoutStallApplicationInput
  }

  export type StallApplicationUncheckedCreateInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    boothType: string
    items?: string | null
    priceRangeMin?: number | null
    priceRangeMax?: number | null
    boothCount?: number | null
    tentWidth?: number | null
    tentDepth?: number | null
    tentHeight?: number | null
    vehicleCount?: number | null
    rentalTables?: number | null
    rentalChairs?: number | null
    questions?: string | null
    eventId?: string | null
    createdAt?: Date | string
    adminNotes?: ApplicationNoteUncheckedCreateNestedManyWithoutStallApplicationInput
  }

  export type StallApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutStallApplicationsNestedInput
    adminNotes?: ApplicationNoteUpdateManyWithoutStallApplicationNestedInput
  }

  export type StallApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminNotes?: ApplicationNoteUncheckedUpdateManyWithoutStallApplicationNestedInput
  }

  export type StallApplicationCreateManyInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    boothType: string
    items?: string | null
    priceRangeMin?: number | null
    priceRangeMax?: number | null
    boothCount?: number | null
    tentWidth?: number | null
    tentDepth?: number | null
    tentHeight?: number | null
    vehicleCount?: number | null
    rentalTables?: number | null
    rentalChairs?: number | null
    questions?: string | null
    eventId?: string | null
    createdAt?: Date | string
  }

  export type StallApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StallApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformerApplicationCreateInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    performance: string
    performerCount?: number | null
    slotCount?: number | null
    vehicleCount?: number | null
    rentalAmp?: number | null
    rentalMic?: number | null
    questions?: string | null
    createdAt?: Date | string
    event?: EventCreateNestedOneWithoutPerformerApplicationsInput
    adminNotes?: ApplicationNoteCreateNestedManyWithoutPerformerApplicationInput
  }

  export type PerformerApplicationUncheckedCreateInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    performance: string
    performerCount?: number | null
    slotCount?: number | null
    vehicleCount?: number | null
    rentalAmp?: number | null
    rentalMic?: number | null
    questions?: string | null
    eventId?: string | null
    createdAt?: Date | string
    adminNotes?: ApplicationNoteUncheckedCreateNestedManyWithoutPerformerApplicationInput
  }

  export type PerformerApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutPerformerApplicationsNestedInput
    adminNotes?: ApplicationNoteUpdateManyWithoutPerformerApplicationNestedInput
  }

  export type PerformerApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminNotes?: ApplicationNoteUncheckedUpdateManyWithoutPerformerApplicationNestedInput
  }

  export type PerformerApplicationCreateManyInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    performance: string
    performerCount?: number | null
    slotCount?: number | null
    vehicleCount?: number | null
    rentalAmp?: number | null
    rentalMic?: number | null
    questions?: string | null
    eventId?: string | null
    createdAt?: Date | string
  }

  export type PerformerApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformerApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationNoteCreateInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    stallApplication?: StallApplicationCreateNestedOneWithoutAdminNotesInput
    performerApplication?: PerformerApplicationCreateNestedOneWithoutAdminNotesInput
  }

  export type ApplicationNoteUncheckedCreateInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    stallApplicationId?: string | null
    performerApplicationId?: string | null
  }

  export type ApplicationNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stallApplication?: StallApplicationUpdateOneWithoutAdminNotesNestedInput
    performerApplication?: PerformerApplicationUpdateOneWithoutAdminNotesNestedInput
  }

  export type ApplicationNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stallApplicationId?: NullableStringFieldUpdateOperationsInput | string | null
    performerApplicationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationNoteCreateManyInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    stallApplicationId?: string | null
    performerApplicationId?: string | null
  }

  export type ApplicationNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stallApplicationId?: NullableStringFieldUpdateOperationsInput | string | null
    performerApplicationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SignupListRelationFilter = {
    every?: SignupWhereInput
    some?: SignupWhereInput
    none?: SignupWhereInput
  }

  export type VolunteerTagListRelationFilter = {
    every?: VolunteerTagWhereInput
    some?: VolunteerTagWhereInput
    none?: VolunteerTagWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SignupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VolunteerTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VolunteerEmailNameCompoundUniqueInput = {
    email: string
    name: string
  }

  export type VolunteerCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    orgName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    skills?: SortOrder
    interests?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type VolunteerMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    orgName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    skills?: SortOrder
    interests?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type VolunteerMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    orgName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    skills?: SortOrder
    interests?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StallApplicationListRelationFilter = {
    every?: StallApplicationWhereInput
    some?: StallApplicationWhereInput
    none?: StallApplicationWhereInput
  }

  export type PerformerApplicationListRelationFilter = {
    every?: PerformerApplicationWhereInput
    some?: PerformerApplicationWhereInput
    none?: PerformerApplicationWhereInput
  }

  export type StallApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PerformerApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    date?: SortOrder
    applicationStartDate?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    date?: SortOrder
    applicationStartDate?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    date?: SortOrder
    applicationStartDate?: SortOrder
    location?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VolunteerRelationFilter = {
    is?: VolunteerWhereInput
    isNot?: VolunteerWhereInput
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type SignupCountOrderByAggregateInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    eventId?: SortOrder
    role?: SortOrder
    detailsJson?: SortOrder
    availability?: SortOrder
    freq?: SortOrder
    status?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
  }

  export type SignupMaxOrderByAggregateInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    eventId?: SortOrder
    role?: SortOrder
    detailsJson?: SortOrder
    availability?: SortOrder
    freq?: SortOrder
    status?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
  }

  export type SignupMinOrderByAggregateInput = {
    id?: SortOrder
    volunteerId?: SortOrder
    eventId?: SortOrder
    role?: SortOrder
    detailsJson?: SortOrder
    availability?: SortOrder
    freq?: SortOrder
    status?: SortOrder
    memo?: SortOrder
    createdAt?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    kind?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    kind?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    kind?: SortOrder
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type VolunteerTagVolunteerIdTagIdCompoundUniqueInput = {
    volunteerId: string
    tagId: string
  }

  export type VolunteerTagCountOrderByAggregateInput = {
    volunteerId?: SortOrder
    tagId?: SortOrder
  }

  export type VolunteerTagMaxOrderByAggregateInput = {
    volunteerId?: SortOrder
    tagId?: SortOrder
  }

  export type VolunteerTagMinOrderByAggregateInput = {
    volunteerId?: SortOrder
    tagId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EventNullableRelationFilter = {
    is?: EventWhereInput | null
    isNot?: EventWhereInput | null
  }

  export type ApplicationNoteListRelationFilter = {
    every?: ApplicationNoteWhereInput
    some?: ApplicationNoteWhereInput
    none?: ApplicationNoteWhereInput
  }

  export type ApplicationNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StallApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    boothType?: SortOrder
    items?: SortOrder
    priceRangeMin?: SortOrder
    priceRangeMax?: SortOrder
    boothCount?: SortOrder
    tentWidth?: SortOrder
    tentDepth?: SortOrder
    tentHeight?: SortOrder
    vehicleCount?: SortOrder
    rentalTables?: SortOrder
    rentalChairs?: SortOrder
    questions?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type StallApplicationAvgOrderByAggregateInput = {
    priceRangeMin?: SortOrder
    priceRangeMax?: SortOrder
    boothCount?: SortOrder
    tentWidth?: SortOrder
    tentDepth?: SortOrder
    tentHeight?: SortOrder
    vehicleCount?: SortOrder
    rentalTables?: SortOrder
    rentalChairs?: SortOrder
  }

  export type StallApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    boothType?: SortOrder
    items?: SortOrder
    priceRangeMin?: SortOrder
    priceRangeMax?: SortOrder
    boothCount?: SortOrder
    tentWidth?: SortOrder
    tentDepth?: SortOrder
    tentHeight?: SortOrder
    vehicleCount?: SortOrder
    rentalTables?: SortOrder
    rentalChairs?: SortOrder
    questions?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type StallApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    boothType?: SortOrder
    items?: SortOrder
    priceRangeMin?: SortOrder
    priceRangeMax?: SortOrder
    boothCount?: SortOrder
    tentWidth?: SortOrder
    tentDepth?: SortOrder
    tentHeight?: SortOrder
    vehicleCount?: SortOrder
    rentalTables?: SortOrder
    rentalChairs?: SortOrder
    questions?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type StallApplicationSumOrderByAggregateInput = {
    priceRangeMin?: SortOrder
    priceRangeMax?: SortOrder
    boothCount?: SortOrder
    tentWidth?: SortOrder
    tentDepth?: SortOrder
    tentHeight?: SortOrder
    vehicleCount?: SortOrder
    rentalTables?: SortOrder
    rentalChairs?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PerformerApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    performance?: SortOrder
    performerCount?: SortOrder
    slotCount?: SortOrder
    vehicleCount?: SortOrder
    rentalAmp?: SortOrder
    rentalMic?: SortOrder
    questions?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type PerformerApplicationAvgOrderByAggregateInput = {
    performerCount?: SortOrder
    slotCount?: SortOrder
    vehicleCount?: SortOrder
    rentalAmp?: SortOrder
    rentalMic?: SortOrder
  }

  export type PerformerApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    performance?: SortOrder
    performerCount?: SortOrder
    slotCount?: SortOrder
    vehicleCount?: SortOrder
    rentalAmp?: SortOrder
    rentalMic?: SortOrder
    questions?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type PerformerApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    representative?: SortOrder
    address?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    performance?: SortOrder
    performerCount?: SortOrder
    slotCount?: SortOrder
    vehicleCount?: SortOrder
    rentalAmp?: SortOrder
    rentalMic?: SortOrder
    questions?: SortOrder
    eventId?: SortOrder
    createdAt?: SortOrder
  }

  export type PerformerApplicationSumOrderByAggregateInput = {
    performerCount?: SortOrder
    slotCount?: SortOrder
    vehicleCount?: SortOrder
    rentalAmp?: SortOrder
    rentalMic?: SortOrder
  }

  export type StallApplicationNullableRelationFilter = {
    is?: StallApplicationWhereInput | null
    isNot?: StallApplicationWhereInput | null
  }

  export type PerformerApplicationNullableRelationFilter = {
    is?: PerformerApplicationWhereInput | null
    isNot?: PerformerApplicationWhereInput | null
  }

  export type ApplicationNoteCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    adminName?: SortOrder
    createdAt?: SortOrder
    stallApplicationId?: SortOrder
    performerApplicationId?: SortOrder
  }

  export type ApplicationNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    adminName?: SortOrder
    createdAt?: SortOrder
    stallApplicationId?: SortOrder
    performerApplicationId?: SortOrder
  }

  export type ApplicationNoteMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    adminName?: SortOrder
    createdAt?: SortOrder
    stallApplicationId?: SortOrder
    performerApplicationId?: SortOrder
  }

  export type SignupCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<SignupCreateWithoutVolunteerInput, SignupUncheckedCreateWithoutVolunteerInput> | SignupCreateWithoutVolunteerInput[] | SignupUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: SignupCreateOrConnectWithoutVolunteerInput | SignupCreateOrConnectWithoutVolunteerInput[]
    createMany?: SignupCreateManyVolunteerInputEnvelope
    connect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
  }

  export type VolunteerTagCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<VolunteerTagCreateWithoutVolunteerInput, VolunteerTagUncheckedCreateWithoutVolunteerInput> | VolunteerTagCreateWithoutVolunteerInput[] | VolunteerTagUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: VolunteerTagCreateOrConnectWithoutVolunteerInput | VolunteerTagCreateOrConnectWithoutVolunteerInput[]
    createMany?: VolunteerTagCreateManyVolunteerInputEnvelope
    connect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
  }

  export type SignupUncheckedCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<SignupCreateWithoutVolunteerInput, SignupUncheckedCreateWithoutVolunteerInput> | SignupCreateWithoutVolunteerInput[] | SignupUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: SignupCreateOrConnectWithoutVolunteerInput | SignupCreateOrConnectWithoutVolunteerInput[]
    createMany?: SignupCreateManyVolunteerInputEnvelope
    connect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
  }

  export type VolunteerTagUncheckedCreateNestedManyWithoutVolunteerInput = {
    create?: XOR<VolunteerTagCreateWithoutVolunteerInput, VolunteerTagUncheckedCreateWithoutVolunteerInput> | VolunteerTagCreateWithoutVolunteerInput[] | VolunteerTagUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: VolunteerTagCreateOrConnectWithoutVolunteerInput | VolunteerTagCreateOrConnectWithoutVolunteerInput[]
    createMany?: VolunteerTagCreateManyVolunteerInputEnvelope
    connect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SignupUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<SignupCreateWithoutVolunteerInput, SignupUncheckedCreateWithoutVolunteerInput> | SignupCreateWithoutVolunteerInput[] | SignupUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: SignupCreateOrConnectWithoutVolunteerInput | SignupCreateOrConnectWithoutVolunteerInput[]
    upsert?: SignupUpsertWithWhereUniqueWithoutVolunteerInput | SignupUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: SignupCreateManyVolunteerInputEnvelope
    set?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    disconnect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    delete?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    connect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    update?: SignupUpdateWithWhereUniqueWithoutVolunteerInput | SignupUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: SignupUpdateManyWithWhereWithoutVolunteerInput | SignupUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: SignupScalarWhereInput | SignupScalarWhereInput[]
  }

  export type VolunteerTagUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<VolunteerTagCreateWithoutVolunteerInput, VolunteerTagUncheckedCreateWithoutVolunteerInput> | VolunteerTagCreateWithoutVolunteerInput[] | VolunteerTagUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: VolunteerTagCreateOrConnectWithoutVolunteerInput | VolunteerTagCreateOrConnectWithoutVolunteerInput[]
    upsert?: VolunteerTagUpsertWithWhereUniqueWithoutVolunteerInput | VolunteerTagUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: VolunteerTagCreateManyVolunteerInputEnvelope
    set?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    disconnect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    delete?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    connect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    update?: VolunteerTagUpdateWithWhereUniqueWithoutVolunteerInput | VolunteerTagUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: VolunteerTagUpdateManyWithWhereWithoutVolunteerInput | VolunteerTagUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: VolunteerTagScalarWhereInput | VolunteerTagScalarWhereInput[]
  }

  export type SignupUncheckedUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<SignupCreateWithoutVolunteerInput, SignupUncheckedCreateWithoutVolunteerInput> | SignupCreateWithoutVolunteerInput[] | SignupUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: SignupCreateOrConnectWithoutVolunteerInput | SignupCreateOrConnectWithoutVolunteerInput[]
    upsert?: SignupUpsertWithWhereUniqueWithoutVolunteerInput | SignupUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: SignupCreateManyVolunteerInputEnvelope
    set?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    disconnect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    delete?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    connect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    update?: SignupUpdateWithWhereUniqueWithoutVolunteerInput | SignupUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: SignupUpdateManyWithWhereWithoutVolunteerInput | SignupUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: SignupScalarWhereInput | SignupScalarWhereInput[]
  }

  export type VolunteerTagUncheckedUpdateManyWithoutVolunteerNestedInput = {
    create?: XOR<VolunteerTagCreateWithoutVolunteerInput, VolunteerTagUncheckedCreateWithoutVolunteerInput> | VolunteerTagCreateWithoutVolunteerInput[] | VolunteerTagUncheckedCreateWithoutVolunteerInput[]
    connectOrCreate?: VolunteerTagCreateOrConnectWithoutVolunteerInput | VolunteerTagCreateOrConnectWithoutVolunteerInput[]
    upsert?: VolunteerTagUpsertWithWhereUniqueWithoutVolunteerInput | VolunteerTagUpsertWithWhereUniqueWithoutVolunteerInput[]
    createMany?: VolunteerTagCreateManyVolunteerInputEnvelope
    set?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    disconnect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    delete?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    connect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    update?: VolunteerTagUpdateWithWhereUniqueWithoutVolunteerInput | VolunteerTagUpdateWithWhereUniqueWithoutVolunteerInput[]
    updateMany?: VolunteerTagUpdateManyWithWhereWithoutVolunteerInput | VolunteerTagUpdateManyWithWhereWithoutVolunteerInput[]
    deleteMany?: VolunteerTagScalarWhereInput | VolunteerTagScalarWhereInput[]
  }

  export type SignupCreateNestedManyWithoutEventInput = {
    create?: XOR<SignupCreateWithoutEventInput, SignupUncheckedCreateWithoutEventInput> | SignupCreateWithoutEventInput[] | SignupUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SignupCreateOrConnectWithoutEventInput | SignupCreateOrConnectWithoutEventInput[]
    createMany?: SignupCreateManyEventInputEnvelope
    connect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
  }

  export type StallApplicationCreateNestedManyWithoutEventInput = {
    create?: XOR<StallApplicationCreateWithoutEventInput, StallApplicationUncheckedCreateWithoutEventInput> | StallApplicationCreateWithoutEventInput[] | StallApplicationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: StallApplicationCreateOrConnectWithoutEventInput | StallApplicationCreateOrConnectWithoutEventInput[]
    createMany?: StallApplicationCreateManyEventInputEnvelope
    connect?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
  }

  export type PerformerApplicationCreateNestedManyWithoutEventInput = {
    create?: XOR<PerformerApplicationCreateWithoutEventInput, PerformerApplicationUncheckedCreateWithoutEventInput> | PerformerApplicationCreateWithoutEventInput[] | PerformerApplicationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: PerformerApplicationCreateOrConnectWithoutEventInput | PerformerApplicationCreateOrConnectWithoutEventInput[]
    createMany?: PerformerApplicationCreateManyEventInputEnvelope
    connect?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
  }

  export type SignupUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<SignupCreateWithoutEventInput, SignupUncheckedCreateWithoutEventInput> | SignupCreateWithoutEventInput[] | SignupUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SignupCreateOrConnectWithoutEventInput | SignupCreateOrConnectWithoutEventInput[]
    createMany?: SignupCreateManyEventInputEnvelope
    connect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
  }

  export type StallApplicationUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<StallApplicationCreateWithoutEventInput, StallApplicationUncheckedCreateWithoutEventInput> | StallApplicationCreateWithoutEventInput[] | StallApplicationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: StallApplicationCreateOrConnectWithoutEventInput | StallApplicationCreateOrConnectWithoutEventInput[]
    createMany?: StallApplicationCreateManyEventInputEnvelope
    connect?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
  }

  export type PerformerApplicationUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<PerformerApplicationCreateWithoutEventInput, PerformerApplicationUncheckedCreateWithoutEventInput> | PerformerApplicationCreateWithoutEventInput[] | PerformerApplicationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: PerformerApplicationCreateOrConnectWithoutEventInput | PerformerApplicationCreateOrConnectWithoutEventInput[]
    createMany?: PerformerApplicationCreateManyEventInputEnvelope
    connect?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SignupUpdateManyWithoutEventNestedInput = {
    create?: XOR<SignupCreateWithoutEventInput, SignupUncheckedCreateWithoutEventInput> | SignupCreateWithoutEventInput[] | SignupUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SignupCreateOrConnectWithoutEventInput | SignupCreateOrConnectWithoutEventInput[]
    upsert?: SignupUpsertWithWhereUniqueWithoutEventInput | SignupUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: SignupCreateManyEventInputEnvelope
    set?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    disconnect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    delete?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    connect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    update?: SignupUpdateWithWhereUniqueWithoutEventInput | SignupUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: SignupUpdateManyWithWhereWithoutEventInput | SignupUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: SignupScalarWhereInput | SignupScalarWhereInput[]
  }

  export type StallApplicationUpdateManyWithoutEventNestedInput = {
    create?: XOR<StallApplicationCreateWithoutEventInput, StallApplicationUncheckedCreateWithoutEventInput> | StallApplicationCreateWithoutEventInput[] | StallApplicationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: StallApplicationCreateOrConnectWithoutEventInput | StallApplicationCreateOrConnectWithoutEventInput[]
    upsert?: StallApplicationUpsertWithWhereUniqueWithoutEventInput | StallApplicationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: StallApplicationCreateManyEventInputEnvelope
    set?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
    disconnect?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
    delete?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
    connect?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
    update?: StallApplicationUpdateWithWhereUniqueWithoutEventInput | StallApplicationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: StallApplicationUpdateManyWithWhereWithoutEventInput | StallApplicationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: StallApplicationScalarWhereInput | StallApplicationScalarWhereInput[]
  }

  export type PerformerApplicationUpdateManyWithoutEventNestedInput = {
    create?: XOR<PerformerApplicationCreateWithoutEventInput, PerformerApplicationUncheckedCreateWithoutEventInput> | PerformerApplicationCreateWithoutEventInput[] | PerformerApplicationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: PerformerApplicationCreateOrConnectWithoutEventInput | PerformerApplicationCreateOrConnectWithoutEventInput[]
    upsert?: PerformerApplicationUpsertWithWhereUniqueWithoutEventInput | PerformerApplicationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: PerformerApplicationCreateManyEventInputEnvelope
    set?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
    disconnect?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
    delete?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
    connect?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
    update?: PerformerApplicationUpdateWithWhereUniqueWithoutEventInput | PerformerApplicationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: PerformerApplicationUpdateManyWithWhereWithoutEventInput | PerformerApplicationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: PerformerApplicationScalarWhereInput | PerformerApplicationScalarWhereInput[]
  }

  export type SignupUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<SignupCreateWithoutEventInput, SignupUncheckedCreateWithoutEventInput> | SignupCreateWithoutEventInput[] | SignupUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SignupCreateOrConnectWithoutEventInput | SignupCreateOrConnectWithoutEventInput[]
    upsert?: SignupUpsertWithWhereUniqueWithoutEventInput | SignupUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: SignupCreateManyEventInputEnvelope
    set?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    disconnect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    delete?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    connect?: SignupWhereUniqueInput | SignupWhereUniqueInput[]
    update?: SignupUpdateWithWhereUniqueWithoutEventInput | SignupUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: SignupUpdateManyWithWhereWithoutEventInput | SignupUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: SignupScalarWhereInput | SignupScalarWhereInput[]
  }

  export type StallApplicationUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<StallApplicationCreateWithoutEventInput, StallApplicationUncheckedCreateWithoutEventInput> | StallApplicationCreateWithoutEventInput[] | StallApplicationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: StallApplicationCreateOrConnectWithoutEventInput | StallApplicationCreateOrConnectWithoutEventInput[]
    upsert?: StallApplicationUpsertWithWhereUniqueWithoutEventInput | StallApplicationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: StallApplicationCreateManyEventInputEnvelope
    set?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
    disconnect?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
    delete?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
    connect?: StallApplicationWhereUniqueInput | StallApplicationWhereUniqueInput[]
    update?: StallApplicationUpdateWithWhereUniqueWithoutEventInput | StallApplicationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: StallApplicationUpdateManyWithWhereWithoutEventInput | StallApplicationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: StallApplicationScalarWhereInput | StallApplicationScalarWhereInput[]
  }

  export type PerformerApplicationUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<PerformerApplicationCreateWithoutEventInput, PerformerApplicationUncheckedCreateWithoutEventInput> | PerformerApplicationCreateWithoutEventInput[] | PerformerApplicationUncheckedCreateWithoutEventInput[]
    connectOrCreate?: PerformerApplicationCreateOrConnectWithoutEventInput | PerformerApplicationCreateOrConnectWithoutEventInput[]
    upsert?: PerformerApplicationUpsertWithWhereUniqueWithoutEventInput | PerformerApplicationUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: PerformerApplicationCreateManyEventInputEnvelope
    set?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
    disconnect?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
    delete?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
    connect?: PerformerApplicationWhereUniqueInput | PerformerApplicationWhereUniqueInput[]
    update?: PerformerApplicationUpdateWithWhereUniqueWithoutEventInput | PerformerApplicationUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: PerformerApplicationUpdateManyWithWhereWithoutEventInput | PerformerApplicationUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: PerformerApplicationScalarWhereInput | PerformerApplicationScalarWhereInput[]
  }

  export type VolunteerCreateNestedOneWithoutSignupsInput = {
    create?: XOR<VolunteerCreateWithoutSignupsInput, VolunteerUncheckedCreateWithoutSignupsInput>
    connectOrCreate?: VolunteerCreateOrConnectWithoutSignupsInput
    connect?: VolunteerWhereUniqueInput
  }

  export type EventCreateNestedOneWithoutSignupsInput = {
    create?: XOR<EventCreateWithoutSignupsInput, EventUncheckedCreateWithoutSignupsInput>
    connectOrCreate?: EventCreateOrConnectWithoutSignupsInput
    connect?: EventWhereUniqueInput
  }

  export type VolunteerUpdateOneRequiredWithoutSignupsNestedInput = {
    create?: XOR<VolunteerCreateWithoutSignupsInput, VolunteerUncheckedCreateWithoutSignupsInput>
    connectOrCreate?: VolunteerCreateOrConnectWithoutSignupsInput
    upsert?: VolunteerUpsertWithoutSignupsInput
    connect?: VolunteerWhereUniqueInput
    update?: XOR<XOR<VolunteerUpdateToOneWithWhereWithoutSignupsInput, VolunteerUpdateWithoutSignupsInput>, VolunteerUncheckedUpdateWithoutSignupsInput>
  }

  export type EventUpdateOneRequiredWithoutSignupsNestedInput = {
    create?: XOR<EventCreateWithoutSignupsInput, EventUncheckedCreateWithoutSignupsInput>
    connectOrCreate?: EventCreateOrConnectWithoutSignupsInput
    upsert?: EventUpsertWithoutSignupsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutSignupsInput, EventUpdateWithoutSignupsInput>, EventUncheckedUpdateWithoutSignupsInput>
  }

  export type VolunteerTagCreateNestedManyWithoutTagInput = {
    create?: XOR<VolunteerTagCreateWithoutTagInput, VolunteerTagUncheckedCreateWithoutTagInput> | VolunteerTagCreateWithoutTagInput[] | VolunteerTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: VolunteerTagCreateOrConnectWithoutTagInput | VolunteerTagCreateOrConnectWithoutTagInput[]
    createMany?: VolunteerTagCreateManyTagInputEnvelope
    connect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
  }

  export type VolunteerTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<VolunteerTagCreateWithoutTagInput, VolunteerTagUncheckedCreateWithoutTagInput> | VolunteerTagCreateWithoutTagInput[] | VolunteerTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: VolunteerTagCreateOrConnectWithoutTagInput | VolunteerTagCreateOrConnectWithoutTagInput[]
    createMany?: VolunteerTagCreateManyTagInputEnvelope
    connect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
  }

  export type VolunteerTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<VolunteerTagCreateWithoutTagInput, VolunteerTagUncheckedCreateWithoutTagInput> | VolunteerTagCreateWithoutTagInput[] | VolunteerTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: VolunteerTagCreateOrConnectWithoutTagInput | VolunteerTagCreateOrConnectWithoutTagInput[]
    upsert?: VolunteerTagUpsertWithWhereUniqueWithoutTagInput | VolunteerTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: VolunteerTagCreateManyTagInputEnvelope
    set?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    disconnect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    delete?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    connect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    update?: VolunteerTagUpdateWithWhereUniqueWithoutTagInput | VolunteerTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: VolunteerTagUpdateManyWithWhereWithoutTagInput | VolunteerTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: VolunteerTagScalarWhereInput | VolunteerTagScalarWhereInput[]
  }

  export type VolunteerTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<VolunteerTagCreateWithoutTagInput, VolunteerTagUncheckedCreateWithoutTagInput> | VolunteerTagCreateWithoutTagInput[] | VolunteerTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: VolunteerTagCreateOrConnectWithoutTagInput | VolunteerTagCreateOrConnectWithoutTagInput[]
    upsert?: VolunteerTagUpsertWithWhereUniqueWithoutTagInput | VolunteerTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: VolunteerTagCreateManyTagInputEnvelope
    set?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    disconnect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    delete?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    connect?: VolunteerTagWhereUniqueInput | VolunteerTagWhereUniqueInput[]
    update?: VolunteerTagUpdateWithWhereUniqueWithoutTagInput | VolunteerTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: VolunteerTagUpdateManyWithWhereWithoutTagInput | VolunteerTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: VolunteerTagScalarWhereInput | VolunteerTagScalarWhereInput[]
  }

  export type VolunteerCreateNestedOneWithoutVolunteerTagsInput = {
    create?: XOR<VolunteerCreateWithoutVolunteerTagsInput, VolunteerUncheckedCreateWithoutVolunteerTagsInput>
    connectOrCreate?: VolunteerCreateOrConnectWithoutVolunteerTagsInput
    connect?: VolunteerWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutVolunteerTagsInput = {
    create?: XOR<TagCreateWithoutVolunteerTagsInput, TagUncheckedCreateWithoutVolunteerTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutVolunteerTagsInput
    connect?: TagWhereUniqueInput
  }

  export type VolunteerUpdateOneRequiredWithoutVolunteerTagsNestedInput = {
    create?: XOR<VolunteerCreateWithoutVolunteerTagsInput, VolunteerUncheckedCreateWithoutVolunteerTagsInput>
    connectOrCreate?: VolunteerCreateOrConnectWithoutVolunteerTagsInput
    upsert?: VolunteerUpsertWithoutVolunteerTagsInput
    connect?: VolunteerWhereUniqueInput
    update?: XOR<XOR<VolunteerUpdateToOneWithWhereWithoutVolunteerTagsInput, VolunteerUpdateWithoutVolunteerTagsInput>, VolunteerUncheckedUpdateWithoutVolunteerTagsInput>
  }

  export type TagUpdateOneRequiredWithoutVolunteerTagsNestedInput = {
    create?: XOR<TagCreateWithoutVolunteerTagsInput, TagUncheckedCreateWithoutVolunteerTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutVolunteerTagsInput
    upsert?: TagUpsertWithoutVolunteerTagsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutVolunteerTagsInput, TagUpdateWithoutVolunteerTagsInput>, TagUncheckedUpdateWithoutVolunteerTagsInput>
  }

  export type EventCreateNestedOneWithoutStallApplicationsInput = {
    create?: XOR<EventCreateWithoutStallApplicationsInput, EventUncheckedCreateWithoutStallApplicationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutStallApplicationsInput
    connect?: EventWhereUniqueInput
  }

  export type ApplicationNoteCreateNestedManyWithoutStallApplicationInput = {
    create?: XOR<ApplicationNoteCreateWithoutStallApplicationInput, ApplicationNoteUncheckedCreateWithoutStallApplicationInput> | ApplicationNoteCreateWithoutStallApplicationInput[] | ApplicationNoteUncheckedCreateWithoutStallApplicationInput[]
    connectOrCreate?: ApplicationNoteCreateOrConnectWithoutStallApplicationInput | ApplicationNoteCreateOrConnectWithoutStallApplicationInput[]
    createMany?: ApplicationNoteCreateManyStallApplicationInputEnvelope
    connect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
  }

  export type ApplicationNoteUncheckedCreateNestedManyWithoutStallApplicationInput = {
    create?: XOR<ApplicationNoteCreateWithoutStallApplicationInput, ApplicationNoteUncheckedCreateWithoutStallApplicationInput> | ApplicationNoteCreateWithoutStallApplicationInput[] | ApplicationNoteUncheckedCreateWithoutStallApplicationInput[]
    connectOrCreate?: ApplicationNoteCreateOrConnectWithoutStallApplicationInput | ApplicationNoteCreateOrConnectWithoutStallApplicationInput[]
    createMany?: ApplicationNoteCreateManyStallApplicationInputEnvelope
    connect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUpdateOneWithoutStallApplicationsNestedInput = {
    create?: XOR<EventCreateWithoutStallApplicationsInput, EventUncheckedCreateWithoutStallApplicationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutStallApplicationsInput
    upsert?: EventUpsertWithoutStallApplicationsInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutStallApplicationsInput, EventUpdateWithoutStallApplicationsInput>, EventUncheckedUpdateWithoutStallApplicationsInput>
  }

  export type ApplicationNoteUpdateManyWithoutStallApplicationNestedInput = {
    create?: XOR<ApplicationNoteCreateWithoutStallApplicationInput, ApplicationNoteUncheckedCreateWithoutStallApplicationInput> | ApplicationNoteCreateWithoutStallApplicationInput[] | ApplicationNoteUncheckedCreateWithoutStallApplicationInput[]
    connectOrCreate?: ApplicationNoteCreateOrConnectWithoutStallApplicationInput | ApplicationNoteCreateOrConnectWithoutStallApplicationInput[]
    upsert?: ApplicationNoteUpsertWithWhereUniqueWithoutStallApplicationInput | ApplicationNoteUpsertWithWhereUniqueWithoutStallApplicationInput[]
    createMany?: ApplicationNoteCreateManyStallApplicationInputEnvelope
    set?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    disconnect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    delete?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    connect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    update?: ApplicationNoteUpdateWithWhereUniqueWithoutStallApplicationInput | ApplicationNoteUpdateWithWhereUniqueWithoutStallApplicationInput[]
    updateMany?: ApplicationNoteUpdateManyWithWhereWithoutStallApplicationInput | ApplicationNoteUpdateManyWithWhereWithoutStallApplicationInput[]
    deleteMany?: ApplicationNoteScalarWhereInput | ApplicationNoteScalarWhereInput[]
  }

  export type ApplicationNoteUncheckedUpdateManyWithoutStallApplicationNestedInput = {
    create?: XOR<ApplicationNoteCreateWithoutStallApplicationInput, ApplicationNoteUncheckedCreateWithoutStallApplicationInput> | ApplicationNoteCreateWithoutStallApplicationInput[] | ApplicationNoteUncheckedCreateWithoutStallApplicationInput[]
    connectOrCreate?: ApplicationNoteCreateOrConnectWithoutStallApplicationInput | ApplicationNoteCreateOrConnectWithoutStallApplicationInput[]
    upsert?: ApplicationNoteUpsertWithWhereUniqueWithoutStallApplicationInput | ApplicationNoteUpsertWithWhereUniqueWithoutStallApplicationInput[]
    createMany?: ApplicationNoteCreateManyStallApplicationInputEnvelope
    set?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    disconnect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    delete?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    connect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    update?: ApplicationNoteUpdateWithWhereUniqueWithoutStallApplicationInput | ApplicationNoteUpdateWithWhereUniqueWithoutStallApplicationInput[]
    updateMany?: ApplicationNoteUpdateManyWithWhereWithoutStallApplicationInput | ApplicationNoteUpdateManyWithWhereWithoutStallApplicationInput[]
    deleteMany?: ApplicationNoteScalarWhereInput | ApplicationNoteScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutPerformerApplicationsInput = {
    create?: XOR<EventCreateWithoutPerformerApplicationsInput, EventUncheckedCreateWithoutPerformerApplicationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutPerformerApplicationsInput
    connect?: EventWhereUniqueInput
  }

  export type ApplicationNoteCreateNestedManyWithoutPerformerApplicationInput = {
    create?: XOR<ApplicationNoteCreateWithoutPerformerApplicationInput, ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput> | ApplicationNoteCreateWithoutPerformerApplicationInput[] | ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput[]
    connectOrCreate?: ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput | ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput[]
    createMany?: ApplicationNoteCreateManyPerformerApplicationInputEnvelope
    connect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
  }

  export type ApplicationNoteUncheckedCreateNestedManyWithoutPerformerApplicationInput = {
    create?: XOR<ApplicationNoteCreateWithoutPerformerApplicationInput, ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput> | ApplicationNoteCreateWithoutPerformerApplicationInput[] | ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput[]
    connectOrCreate?: ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput | ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput[]
    createMany?: ApplicationNoteCreateManyPerformerApplicationInputEnvelope
    connect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
  }

  export type EventUpdateOneWithoutPerformerApplicationsNestedInput = {
    create?: XOR<EventCreateWithoutPerformerApplicationsInput, EventUncheckedCreateWithoutPerformerApplicationsInput>
    connectOrCreate?: EventCreateOrConnectWithoutPerformerApplicationsInput
    upsert?: EventUpsertWithoutPerformerApplicationsInput
    disconnect?: EventWhereInput | boolean
    delete?: EventWhereInput | boolean
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutPerformerApplicationsInput, EventUpdateWithoutPerformerApplicationsInput>, EventUncheckedUpdateWithoutPerformerApplicationsInput>
  }

  export type ApplicationNoteUpdateManyWithoutPerformerApplicationNestedInput = {
    create?: XOR<ApplicationNoteCreateWithoutPerformerApplicationInput, ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput> | ApplicationNoteCreateWithoutPerformerApplicationInput[] | ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput[]
    connectOrCreate?: ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput | ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput[]
    upsert?: ApplicationNoteUpsertWithWhereUniqueWithoutPerformerApplicationInput | ApplicationNoteUpsertWithWhereUniqueWithoutPerformerApplicationInput[]
    createMany?: ApplicationNoteCreateManyPerformerApplicationInputEnvelope
    set?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    disconnect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    delete?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    connect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    update?: ApplicationNoteUpdateWithWhereUniqueWithoutPerformerApplicationInput | ApplicationNoteUpdateWithWhereUniqueWithoutPerformerApplicationInput[]
    updateMany?: ApplicationNoteUpdateManyWithWhereWithoutPerformerApplicationInput | ApplicationNoteUpdateManyWithWhereWithoutPerformerApplicationInput[]
    deleteMany?: ApplicationNoteScalarWhereInput | ApplicationNoteScalarWhereInput[]
  }

  export type ApplicationNoteUncheckedUpdateManyWithoutPerformerApplicationNestedInput = {
    create?: XOR<ApplicationNoteCreateWithoutPerformerApplicationInput, ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput> | ApplicationNoteCreateWithoutPerformerApplicationInput[] | ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput[]
    connectOrCreate?: ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput | ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput[]
    upsert?: ApplicationNoteUpsertWithWhereUniqueWithoutPerformerApplicationInput | ApplicationNoteUpsertWithWhereUniqueWithoutPerformerApplicationInput[]
    createMany?: ApplicationNoteCreateManyPerformerApplicationInputEnvelope
    set?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    disconnect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    delete?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    connect?: ApplicationNoteWhereUniqueInput | ApplicationNoteWhereUniqueInput[]
    update?: ApplicationNoteUpdateWithWhereUniqueWithoutPerformerApplicationInput | ApplicationNoteUpdateWithWhereUniqueWithoutPerformerApplicationInput[]
    updateMany?: ApplicationNoteUpdateManyWithWhereWithoutPerformerApplicationInput | ApplicationNoteUpdateManyWithWhereWithoutPerformerApplicationInput[]
    deleteMany?: ApplicationNoteScalarWhereInput | ApplicationNoteScalarWhereInput[]
  }

  export type StallApplicationCreateNestedOneWithoutAdminNotesInput = {
    create?: XOR<StallApplicationCreateWithoutAdminNotesInput, StallApplicationUncheckedCreateWithoutAdminNotesInput>
    connectOrCreate?: StallApplicationCreateOrConnectWithoutAdminNotesInput
    connect?: StallApplicationWhereUniqueInput
  }

  export type PerformerApplicationCreateNestedOneWithoutAdminNotesInput = {
    create?: XOR<PerformerApplicationCreateWithoutAdminNotesInput, PerformerApplicationUncheckedCreateWithoutAdminNotesInput>
    connectOrCreate?: PerformerApplicationCreateOrConnectWithoutAdminNotesInput
    connect?: PerformerApplicationWhereUniqueInput
  }

  export type StallApplicationUpdateOneWithoutAdminNotesNestedInput = {
    create?: XOR<StallApplicationCreateWithoutAdminNotesInput, StallApplicationUncheckedCreateWithoutAdminNotesInput>
    connectOrCreate?: StallApplicationCreateOrConnectWithoutAdminNotesInput
    upsert?: StallApplicationUpsertWithoutAdminNotesInput
    disconnect?: StallApplicationWhereInput | boolean
    delete?: StallApplicationWhereInput | boolean
    connect?: StallApplicationWhereUniqueInput
    update?: XOR<XOR<StallApplicationUpdateToOneWithWhereWithoutAdminNotesInput, StallApplicationUpdateWithoutAdminNotesInput>, StallApplicationUncheckedUpdateWithoutAdminNotesInput>
  }

  export type PerformerApplicationUpdateOneWithoutAdminNotesNestedInput = {
    create?: XOR<PerformerApplicationCreateWithoutAdminNotesInput, PerformerApplicationUncheckedCreateWithoutAdminNotesInput>
    connectOrCreate?: PerformerApplicationCreateOrConnectWithoutAdminNotesInput
    upsert?: PerformerApplicationUpsertWithoutAdminNotesInput
    disconnect?: PerformerApplicationWhereInput | boolean
    delete?: PerformerApplicationWhereInput | boolean
    connect?: PerformerApplicationWhereUniqueInput
    update?: XOR<XOR<PerformerApplicationUpdateToOneWithWhereWithoutAdminNotesInput, PerformerApplicationUpdateWithoutAdminNotesInput>, PerformerApplicationUncheckedUpdateWithoutAdminNotesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SignupCreateWithoutVolunteerInput = {
    id?: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutSignupsInput
  }

  export type SignupUncheckedCreateWithoutVolunteerInput = {
    id?: string
    eventId: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
  }

  export type SignupCreateOrConnectWithoutVolunteerInput = {
    where: SignupWhereUniqueInput
    create: XOR<SignupCreateWithoutVolunteerInput, SignupUncheckedCreateWithoutVolunteerInput>
  }

  export type SignupCreateManyVolunteerInputEnvelope = {
    data: SignupCreateManyVolunteerInput | SignupCreateManyVolunteerInput[]
  }

  export type VolunteerTagCreateWithoutVolunteerInput = {
    tag: TagCreateNestedOneWithoutVolunteerTagsInput
  }

  export type VolunteerTagUncheckedCreateWithoutVolunteerInput = {
    tagId: string
  }

  export type VolunteerTagCreateOrConnectWithoutVolunteerInput = {
    where: VolunteerTagWhereUniqueInput
    create: XOR<VolunteerTagCreateWithoutVolunteerInput, VolunteerTagUncheckedCreateWithoutVolunteerInput>
  }

  export type VolunteerTagCreateManyVolunteerInputEnvelope = {
    data: VolunteerTagCreateManyVolunteerInput | VolunteerTagCreateManyVolunteerInput[]
  }

  export type SignupUpsertWithWhereUniqueWithoutVolunteerInput = {
    where: SignupWhereUniqueInput
    update: XOR<SignupUpdateWithoutVolunteerInput, SignupUncheckedUpdateWithoutVolunteerInput>
    create: XOR<SignupCreateWithoutVolunteerInput, SignupUncheckedCreateWithoutVolunteerInput>
  }

  export type SignupUpdateWithWhereUniqueWithoutVolunteerInput = {
    where: SignupWhereUniqueInput
    data: XOR<SignupUpdateWithoutVolunteerInput, SignupUncheckedUpdateWithoutVolunteerInput>
  }

  export type SignupUpdateManyWithWhereWithoutVolunteerInput = {
    where: SignupScalarWhereInput
    data: XOR<SignupUpdateManyMutationInput, SignupUncheckedUpdateManyWithoutVolunteerInput>
  }

  export type SignupScalarWhereInput = {
    AND?: SignupScalarWhereInput | SignupScalarWhereInput[]
    OR?: SignupScalarWhereInput[]
    NOT?: SignupScalarWhereInput | SignupScalarWhereInput[]
    id?: StringFilter<"Signup"> | string
    volunteerId?: StringFilter<"Signup"> | string
    eventId?: StringFilter<"Signup"> | string
    role?: StringFilter<"Signup"> | string
    detailsJson?: StringFilter<"Signup"> | string
    availability?: StringNullableFilter<"Signup"> | string | null
    freq?: StringFilter<"Signup"> | string
    status?: StringFilter<"Signup"> | string
    memo?: StringNullableFilter<"Signup"> | string | null
    createdAt?: DateTimeFilter<"Signup"> | Date | string
  }

  export type VolunteerTagUpsertWithWhereUniqueWithoutVolunteerInput = {
    where: VolunteerTagWhereUniqueInput
    update: XOR<VolunteerTagUpdateWithoutVolunteerInput, VolunteerTagUncheckedUpdateWithoutVolunteerInput>
    create: XOR<VolunteerTagCreateWithoutVolunteerInput, VolunteerTagUncheckedCreateWithoutVolunteerInput>
  }

  export type VolunteerTagUpdateWithWhereUniqueWithoutVolunteerInput = {
    where: VolunteerTagWhereUniqueInput
    data: XOR<VolunteerTagUpdateWithoutVolunteerInput, VolunteerTagUncheckedUpdateWithoutVolunteerInput>
  }

  export type VolunteerTagUpdateManyWithWhereWithoutVolunteerInput = {
    where: VolunteerTagScalarWhereInput
    data: XOR<VolunteerTagUpdateManyMutationInput, VolunteerTagUncheckedUpdateManyWithoutVolunteerInput>
  }

  export type VolunteerTagScalarWhereInput = {
    AND?: VolunteerTagScalarWhereInput | VolunteerTagScalarWhereInput[]
    OR?: VolunteerTagScalarWhereInput[]
    NOT?: VolunteerTagScalarWhereInput | VolunteerTagScalarWhereInput[]
    volunteerId?: StringFilter<"VolunteerTag"> | string
    tagId?: StringFilter<"VolunteerTag"> | string
  }

  export type SignupCreateWithoutEventInput = {
    id?: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
    volunteer: VolunteerCreateNestedOneWithoutSignupsInput
  }

  export type SignupUncheckedCreateWithoutEventInput = {
    id?: string
    volunteerId: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
  }

  export type SignupCreateOrConnectWithoutEventInput = {
    where: SignupWhereUniqueInput
    create: XOR<SignupCreateWithoutEventInput, SignupUncheckedCreateWithoutEventInput>
  }

  export type SignupCreateManyEventInputEnvelope = {
    data: SignupCreateManyEventInput | SignupCreateManyEventInput[]
  }

  export type StallApplicationCreateWithoutEventInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    boothType: string
    items?: string | null
    priceRangeMin?: number | null
    priceRangeMax?: number | null
    boothCount?: number | null
    tentWidth?: number | null
    tentDepth?: number | null
    tentHeight?: number | null
    vehicleCount?: number | null
    rentalTables?: number | null
    rentalChairs?: number | null
    questions?: string | null
    createdAt?: Date | string
    adminNotes?: ApplicationNoteCreateNestedManyWithoutStallApplicationInput
  }

  export type StallApplicationUncheckedCreateWithoutEventInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    boothType: string
    items?: string | null
    priceRangeMin?: number | null
    priceRangeMax?: number | null
    boothCount?: number | null
    tentWidth?: number | null
    tentDepth?: number | null
    tentHeight?: number | null
    vehicleCount?: number | null
    rentalTables?: number | null
    rentalChairs?: number | null
    questions?: string | null
    createdAt?: Date | string
    adminNotes?: ApplicationNoteUncheckedCreateNestedManyWithoutStallApplicationInput
  }

  export type StallApplicationCreateOrConnectWithoutEventInput = {
    where: StallApplicationWhereUniqueInput
    create: XOR<StallApplicationCreateWithoutEventInput, StallApplicationUncheckedCreateWithoutEventInput>
  }

  export type StallApplicationCreateManyEventInputEnvelope = {
    data: StallApplicationCreateManyEventInput | StallApplicationCreateManyEventInput[]
  }

  export type PerformerApplicationCreateWithoutEventInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    performance: string
    performerCount?: number | null
    slotCount?: number | null
    vehicleCount?: number | null
    rentalAmp?: number | null
    rentalMic?: number | null
    questions?: string | null
    createdAt?: Date | string
    adminNotes?: ApplicationNoteCreateNestedManyWithoutPerformerApplicationInput
  }

  export type PerformerApplicationUncheckedCreateWithoutEventInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    performance: string
    performerCount?: number | null
    slotCount?: number | null
    vehicleCount?: number | null
    rentalAmp?: number | null
    rentalMic?: number | null
    questions?: string | null
    createdAt?: Date | string
    adminNotes?: ApplicationNoteUncheckedCreateNestedManyWithoutPerformerApplicationInput
  }

  export type PerformerApplicationCreateOrConnectWithoutEventInput = {
    where: PerformerApplicationWhereUniqueInput
    create: XOR<PerformerApplicationCreateWithoutEventInput, PerformerApplicationUncheckedCreateWithoutEventInput>
  }

  export type PerformerApplicationCreateManyEventInputEnvelope = {
    data: PerformerApplicationCreateManyEventInput | PerformerApplicationCreateManyEventInput[]
  }

  export type SignupUpsertWithWhereUniqueWithoutEventInput = {
    where: SignupWhereUniqueInput
    update: XOR<SignupUpdateWithoutEventInput, SignupUncheckedUpdateWithoutEventInput>
    create: XOR<SignupCreateWithoutEventInput, SignupUncheckedCreateWithoutEventInput>
  }

  export type SignupUpdateWithWhereUniqueWithoutEventInput = {
    where: SignupWhereUniqueInput
    data: XOR<SignupUpdateWithoutEventInput, SignupUncheckedUpdateWithoutEventInput>
  }

  export type SignupUpdateManyWithWhereWithoutEventInput = {
    where: SignupScalarWhereInput
    data: XOR<SignupUpdateManyMutationInput, SignupUncheckedUpdateManyWithoutEventInput>
  }

  export type StallApplicationUpsertWithWhereUniqueWithoutEventInput = {
    where: StallApplicationWhereUniqueInput
    update: XOR<StallApplicationUpdateWithoutEventInput, StallApplicationUncheckedUpdateWithoutEventInput>
    create: XOR<StallApplicationCreateWithoutEventInput, StallApplicationUncheckedCreateWithoutEventInput>
  }

  export type StallApplicationUpdateWithWhereUniqueWithoutEventInput = {
    where: StallApplicationWhereUniqueInput
    data: XOR<StallApplicationUpdateWithoutEventInput, StallApplicationUncheckedUpdateWithoutEventInput>
  }

  export type StallApplicationUpdateManyWithWhereWithoutEventInput = {
    where: StallApplicationScalarWhereInput
    data: XOR<StallApplicationUpdateManyMutationInput, StallApplicationUncheckedUpdateManyWithoutEventInput>
  }

  export type StallApplicationScalarWhereInput = {
    AND?: StallApplicationScalarWhereInput | StallApplicationScalarWhereInput[]
    OR?: StallApplicationScalarWhereInput[]
    NOT?: StallApplicationScalarWhereInput | StallApplicationScalarWhereInput[]
    id?: StringFilter<"StallApplication"> | string
    groupName?: StringFilter<"StallApplication"> | string
    representative?: StringFilter<"StallApplication"> | string
    address?: StringNullableFilter<"StallApplication"> | string | null
    email?: StringFilter<"StallApplication"> | string
    phone?: StringFilter<"StallApplication"> | string
    boothType?: StringFilter<"StallApplication"> | string
    items?: StringNullableFilter<"StallApplication"> | string | null
    priceRangeMin?: IntNullableFilter<"StallApplication"> | number | null
    priceRangeMax?: IntNullableFilter<"StallApplication"> | number | null
    boothCount?: IntNullableFilter<"StallApplication"> | number | null
    tentWidth?: FloatNullableFilter<"StallApplication"> | number | null
    tentDepth?: FloatNullableFilter<"StallApplication"> | number | null
    tentHeight?: FloatNullableFilter<"StallApplication"> | number | null
    vehicleCount?: IntNullableFilter<"StallApplication"> | number | null
    rentalTables?: IntNullableFilter<"StallApplication"> | number | null
    rentalChairs?: IntNullableFilter<"StallApplication"> | number | null
    questions?: StringNullableFilter<"StallApplication"> | string | null
    eventId?: StringNullableFilter<"StallApplication"> | string | null
    createdAt?: DateTimeFilter<"StallApplication"> | Date | string
  }

  export type PerformerApplicationUpsertWithWhereUniqueWithoutEventInput = {
    where: PerformerApplicationWhereUniqueInput
    update: XOR<PerformerApplicationUpdateWithoutEventInput, PerformerApplicationUncheckedUpdateWithoutEventInput>
    create: XOR<PerformerApplicationCreateWithoutEventInput, PerformerApplicationUncheckedCreateWithoutEventInput>
  }

  export type PerformerApplicationUpdateWithWhereUniqueWithoutEventInput = {
    where: PerformerApplicationWhereUniqueInput
    data: XOR<PerformerApplicationUpdateWithoutEventInput, PerformerApplicationUncheckedUpdateWithoutEventInput>
  }

  export type PerformerApplicationUpdateManyWithWhereWithoutEventInput = {
    where: PerformerApplicationScalarWhereInput
    data: XOR<PerformerApplicationUpdateManyMutationInput, PerformerApplicationUncheckedUpdateManyWithoutEventInput>
  }

  export type PerformerApplicationScalarWhereInput = {
    AND?: PerformerApplicationScalarWhereInput | PerformerApplicationScalarWhereInput[]
    OR?: PerformerApplicationScalarWhereInput[]
    NOT?: PerformerApplicationScalarWhereInput | PerformerApplicationScalarWhereInput[]
    id?: StringFilter<"PerformerApplication"> | string
    groupName?: StringFilter<"PerformerApplication"> | string
    representative?: StringFilter<"PerformerApplication"> | string
    address?: StringNullableFilter<"PerformerApplication"> | string | null
    email?: StringFilter<"PerformerApplication"> | string
    phone?: StringFilter<"PerformerApplication"> | string
    performance?: StringFilter<"PerformerApplication"> | string
    performerCount?: IntNullableFilter<"PerformerApplication"> | number | null
    slotCount?: IntNullableFilter<"PerformerApplication"> | number | null
    vehicleCount?: IntNullableFilter<"PerformerApplication"> | number | null
    rentalAmp?: IntNullableFilter<"PerformerApplication"> | number | null
    rentalMic?: IntNullableFilter<"PerformerApplication"> | number | null
    questions?: StringNullableFilter<"PerformerApplication"> | string | null
    eventId?: StringNullableFilter<"PerformerApplication"> | string | null
    createdAt?: DateTimeFilter<"PerformerApplication"> | Date | string
  }

  export type VolunteerCreateWithoutSignupsInput = {
    id?: string
    type: string
    name: string
    orgName?: string | null
    email: string
    phone?: string | null
    address?: string | null
    skills: string
    interests: string
    notes?: string | null
    createdAt?: Date | string
    volunteerTags?: VolunteerTagCreateNestedManyWithoutVolunteerInput
  }

  export type VolunteerUncheckedCreateWithoutSignupsInput = {
    id?: string
    type: string
    name: string
    orgName?: string | null
    email: string
    phone?: string | null
    address?: string | null
    skills: string
    interests: string
    notes?: string | null
    createdAt?: Date | string
    volunteerTags?: VolunteerTagUncheckedCreateNestedManyWithoutVolunteerInput
  }

  export type VolunteerCreateOrConnectWithoutSignupsInput = {
    where: VolunteerWhereUniqueInput
    create: XOR<VolunteerCreateWithoutSignupsInput, VolunteerUncheckedCreateWithoutSignupsInput>
  }

  export type EventCreateWithoutSignupsInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
    stallApplications?: StallApplicationCreateNestedManyWithoutEventInput
    performerApplications?: PerformerApplicationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutSignupsInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
    stallApplications?: StallApplicationUncheckedCreateNestedManyWithoutEventInput
    performerApplications?: PerformerApplicationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutSignupsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutSignupsInput, EventUncheckedCreateWithoutSignupsInput>
  }

  export type VolunteerUpsertWithoutSignupsInput = {
    update: XOR<VolunteerUpdateWithoutSignupsInput, VolunteerUncheckedUpdateWithoutSignupsInput>
    create: XOR<VolunteerCreateWithoutSignupsInput, VolunteerUncheckedCreateWithoutSignupsInput>
    where?: VolunteerWhereInput
  }

  export type VolunteerUpdateToOneWithWhereWithoutSignupsInput = {
    where?: VolunteerWhereInput
    data: XOR<VolunteerUpdateWithoutSignupsInput, VolunteerUncheckedUpdateWithoutSignupsInput>
  }

  export type VolunteerUpdateWithoutSignupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orgName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: StringFieldUpdateOperationsInput | string
    interests?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    volunteerTags?: VolunteerTagUpdateManyWithoutVolunteerNestedInput
  }

  export type VolunteerUncheckedUpdateWithoutSignupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orgName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: StringFieldUpdateOperationsInput | string
    interests?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    volunteerTags?: VolunteerTagUncheckedUpdateManyWithoutVolunteerNestedInput
  }

  export type EventUpsertWithoutSignupsInput = {
    update: XOR<EventUpdateWithoutSignupsInput, EventUncheckedUpdateWithoutSignupsInput>
    create: XOR<EventCreateWithoutSignupsInput, EventUncheckedCreateWithoutSignupsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutSignupsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutSignupsInput, EventUncheckedUpdateWithoutSignupsInput>
  }

  export type EventUpdateWithoutSignupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stallApplications?: StallApplicationUpdateManyWithoutEventNestedInput
    performerApplications?: PerformerApplicationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutSignupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stallApplications?: StallApplicationUncheckedUpdateManyWithoutEventNestedInput
    performerApplications?: PerformerApplicationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type VolunteerTagCreateWithoutTagInput = {
    volunteer: VolunteerCreateNestedOneWithoutVolunteerTagsInput
  }

  export type VolunteerTagUncheckedCreateWithoutTagInput = {
    volunteerId: string
  }

  export type VolunteerTagCreateOrConnectWithoutTagInput = {
    where: VolunteerTagWhereUniqueInput
    create: XOR<VolunteerTagCreateWithoutTagInput, VolunteerTagUncheckedCreateWithoutTagInput>
  }

  export type VolunteerTagCreateManyTagInputEnvelope = {
    data: VolunteerTagCreateManyTagInput | VolunteerTagCreateManyTagInput[]
  }

  export type VolunteerTagUpsertWithWhereUniqueWithoutTagInput = {
    where: VolunteerTagWhereUniqueInput
    update: XOR<VolunteerTagUpdateWithoutTagInput, VolunteerTagUncheckedUpdateWithoutTagInput>
    create: XOR<VolunteerTagCreateWithoutTagInput, VolunteerTagUncheckedCreateWithoutTagInput>
  }

  export type VolunteerTagUpdateWithWhereUniqueWithoutTagInput = {
    where: VolunteerTagWhereUniqueInput
    data: XOR<VolunteerTagUpdateWithoutTagInput, VolunteerTagUncheckedUpdateWithoutTagInput>
  }

  export type VolunteerTagUpdateManyWithWhereWithoutTagInput = {
    where: VolunteerTagScalarWhereInput
    data: XOR<VolunteerTagUpdateManyMutationInput, VolunteerTagUncheckedUpdateManyWithoutTagInput>
  }

  export type VolunteerCreateWithoutVolunteerTagsInput = {
    id?: string
    type: string
    name: string
    orgName?: string | null
    email: string
    phone?: string | null
    address?: string | null
    skills: string
    interests: string
    notes?: string | null
    createdAt?: Date | string
    signups?: SignupCreateNestedManyWithoutVolunteerInput
  }

  export type VolunteerUncheckedCreateWithoutVolunteerTagsInput = {
    id?: string
    type: string
    name: string
    orgName?: string | null
    email: string
    phone?: string | null
    address?: string | null
    skills: string
    interests: string
    notes?: string | null
    createdAt?: Date | string
    signups?: SignupUncheckedCreateNestedManyWithoutVolunteerInput
  }

  export type VolunteerCreateOrConnectWithoutVolunteerTagsInput = {
    where: VolunteerWhereUniqueInput
    create: XOR<VolunteerCreateWithoutVolunteerTagsInput, VolunteerUncheckedCreateWithoutVolunteerTagsInput>
  }

  export type TagCreateWithoutVolunteerTagsInput = {
    id?: string
    name: string
    kind: string
  }

  export type TagUncheckedCreateWithoutVolunteerTagsInput = {
    id?: string
    name: string
    kind: string
  }

  export type TagCreateOrConnectWithoutVolunteerTagsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutVolunteerTagsInput, TagUncheckedCreateWithoutVolunteerTagsInput>
  }

  export type VolunteerUpsertWithoutVolunteerTagsInput = {
    update: XOR<VolunteerUpdateWithoutVolunteerTagsInput, VolunteerUncheckedUpdateWithoutVolunteerTagsInput>
    create: XOR<VolunteerCreateWithoutVolunteerTagsInput, VolunteerUncheckedCreateWithoutVolunteerTagsInput>
    where?: VolunteerWhereInput
  }

  export type VolunteerUpdateToOneWithWhereWithoutVolunteerTagsInput = {
    where?: VolunteerWhereInput
    data: XOR<VolunteerUpdateWithoutVolunteerTagsInput, VolunteerUncheckedUpdateWithoutVolunteerTagsInput>
  }

  export type VolunteerUpdateWithoutVolunteerTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orgName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: StringFieldUpdateOperationsInput | string
    interests?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUpdateManyWithoutVolunteerNestedInput
  }

  export type VolunteerUncheckedUpdateWithoutVolunteerTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    orgName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: StringFieldUpdateOperationsInput | string
    interests?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUncheckedUpdateManyWithoutVolunteerNestedInput
  }

  export type TagUpsertWithoutVolunteerTagsInput = {
    update: XOR<TagUpdateWithoutVolunteerTagsInput, TagUncheckedUpdateWithoutVolunteerTagsInput>
    create: XOR<TagCreateWithoutVolunteerTagsInput, TagUncheckedCreateWithoutVolunteerTagsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutVolunteerTagsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutVolunteerTagsInput, TagUncheckedUpdateWithoutVolunteerTagsInput>
  }

  export type TagUpdateWithoutVolunteerTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutVolunteerTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    kind?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateWithoutStallApplicationsInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
    signups?: SignupCreateNestedManyWithoutEventInput
    performerApplications?: PerformerApplicationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutStallApplicationsInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
    signups?: SignupUncheckedCreateNestedManyWithoutEventInput
    performerApplications?: PerformerApplicationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutStallApplicationsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutStallApplicationsInput, EventUncheckedCreateWithoutStallApplicationsInput>
  }

  export type ApplicationNoteCreateWithoutStallApplicationInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    performerApplication?: PerformerApplicationCreateNestedOneWithoutAdminNotesInput
  }

  export type ApplicationNoteUncheckedCreateWithoutStallApplicationInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    performerApplicationId?: string | null
  }

  export type ApplicationNoteCreateOrConnectWithoutStallApplicationInput = {
    where: ApplicationNoteWhereUniqueInput
    create: XOR<ApplicationNoteCreateWithoutStallApplicationInput, ApplicationNoteUncheckedCreateWithoutStallApplicationInput>
  }

  export type ApplicationNoteCreateManyStallApplicationInputEnvelope = {
    data: ApplicationNoteCreateManyStallApplicationInput | ApplicationNoteCreateManyStallApplicationInput[]
  }

  export type EventUpsertWithoutStallApplicationsInput = {
    update: XOR<EventUpdateWithoutStallApplicationsInput, EventUncheckedUpdateWithoutStallApplicationsInput>
    create: XOR<EventCreateWithoutStallApplicationsInput, EventUncheckedCreateWithoutStallApplicationsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutStallApplicationsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutStallApplicationsInput, EventUncheckedUpdateWithoutStallApplicationsInput>
  }

  export type EventUpdateWithoutStallApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUpdateManyWithoutEventNestedInput
    performerApplications?: PerformerApplicationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutStallApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUncheckedUpdateManyWithoutEventNestedInput
    performerApplications?: PerformerApplicationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ApplicationNoteUpsertWithWhereUniqueWithoutStallApplicationInput = {
    where: ApplicationNoteWhereUniqueInput
    update: XOR<ApplicationNoteUpdateWithoutStallApplicationInput, ApplicationNoteUncheckedUpdateWithoutStallApplicationInput>
    create: XOR<ApplicationNoteCreateWithoutStallApplicationInput, ApplicationNoteUncheckedCreateWithoutStallApplicationInput>
  }

  export type ApplicationNoteUpdateWithWhereUniqueWithoutStallApplicationInput = {
    where: ApplicationNoteWhereUniqueInput
    data: XOR<ApplicationNoteUpdateWithoutStallApplicationInput, ApplicationNoteUncheckedUpdateWithoutStallApplicationInput>
  }

  export type ApplicationNoteUpdateManyWithWhereWithoutStallApplicationInput = {
    where: ApplicationNoteScalarWhereInput
    data: XOR<ApplicationNoteUpdateManyMutationInput, ApplicationNoteUncheckedUpdateManyWithoutStallApplicationInput>
  }

  export type ApplicationNoteScalarWhereInput = {
    AND?: ApplicationNoteScalarWhereInput | ApplicationNoteScalarWhereInput[]
    OR?: ApplicationNoteScalarWhereInput[]
    NOT?: ApplicationNoteScalarWhereInput | ApplicationNoteScalarWhereInput[]
    id?: StringFilter<"ApplicationNote"> | string
    content?: StringFilter<"ApplicationNote"> | string
    adminName?: StringFilter<"ApplicationNote"> | string
    createdAt?: DateTimeFilter<"ApplicationNote"> | Date | string
    stallApplicationId?: StringNullableFilter<"ApplicationNote"> | string | null
    performerApplicationId?: StringNullableFilter<"ApplicationNote"> | string | null
  }

  export type EventCreateWithoutPerformerApplicationsInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
    signups?: SignupCreateNestedManyWithoutEventInput
    stallApplications?: StallApplicationCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutPerformerApplicationsInput = {
    id?: string
    title: string
    slug: string
    date: Date | string
    applicationStartDate?: Date | string | null
    location: string
    description: string
    createdAt?: Date | string
    signups?: SignupUncheckedCreateNestedManyWithoutEventInput
    stallApplications?: StallApplicationUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutPerformerApplicationsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutPerformerApplicationsInput, EventUncheckedCreateWithoutPerformerApplicationsInput>
  }

  export type ApplicationNoteCreateWithoutPerformerApplicationInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    stallApplication?: StallApplicationCreateNestedOneWithoutAdminNotesInput
  }

  export type ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    stallApplicationId?: string | null
  }

  export type ApplicationNoteCreateOrConnectWithoutPerformerApplicationInput = {
    where: ApplicationNoteWhereUniqueInput
    create: XOR<ApplicationNoteCreateWithoutPerformerApplicationInput, ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput>
  }

  export type ApplicationNoteCreateManyPerformerApplicationInputEnvelope = {
    data: ApplicationNoteCreateManyPerformerApplicationInput | ApplicationNoteCreateManyPerformerApplicationInput[]
  }

  export type EventUpsertWithoutPerformerApplicationsInput = {
    update: XOR<EventUpdateWithoutPerformerApplicationsInput, EventUncheckedUpdateWithoutPerformerApplicationsInput>
    create: XOR<EventCreateWithoutPerformerApplicationsInput, EventUncheckedCreateWithoutPerformerApplicationsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutPerformerApplicationsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutPerformerApplicationsInput, EventUncheckedUpdateWithoutPerformerApplicationsInput>
  }

  export type EventUpdateWithoutPerformerApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUpdateManyWithoutEventNestedInput
    stallApplications?: StallApplicationUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutPerformerApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signups?: SignupUncheckedUpdateManyWithoutEventNestedInput
    stallApplications?: StallApplicationUncheckedUpdateManyWithoutEventNestedInput
  }

  export type ApplicationNoteUpsertWithWhereUniqueWithoutPerformerApplicationInput = {
    where: ApplicationNoteWhereUniqueInput
    update: XOR<ApplicationNoteUpdateWithoutPerformerApplicationInput, ApplicationNoteUncheckedUpdateWithoutPerformerApplicationInput>
    create: XOR<ApplicationNoteCreateWithoutPerformerApplicationInput, ApplicationNoteUncheckedCreateWithoutPerformerApplicationInput>
  }

  export type ApplicationNoteUpdateWithWhereUniqueWithoutPerformerApplicationInput = {
    where: ApplicationNoteWhereUniqueInput
    data: XOR<ApplicationNoteUpdateWithoutPerformerApplicationInput, ApplicationNoteUncheckedUpdateWithoutPerformerApplicationInput>
  }

  export type ApplicationNoteUpdateManyWithWhereWithoutPerformerApplicationInput = {
    where: ApplicationNoteScalarWhereInput
    data: XOR<ApplicationNoteUpdateManyMutationInput, ApplicationNoteUncheckedUpdateManyWithoutPerformerApplicationInput>
  }

  export type StallApplicationCreateWithoutAdminNotesInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    boothType: string
    items?: string | null
    priceRangeMin?: number | null
    priceRangeMax?: number | null
    boothCount?: number | null
    tentWidth?: number | null
    tentDepth?: number | null
    tentHeight?: number | null
    vehicleCount?: number | null
    rentalTables?: number | null
    rentalChairs?: number | null
    questions?: string | null
    createdAt?: Date | string
    event?: EventCreateNestedOneWithoutStallApplicationsInput
  }

  export type StallApplicationUncheckedCreateWithoutAdminNotesInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    boothType: string
    items?: string | null
    priceRangeMin?: number | null
    priceRangeMax?: number | null
    boothCount?: number | null
    tentWidth?: number | null
    tentDepth?: number | null
    tentHeight?: number | null
    vehicleCount?: number | null
    rentalTables?: number | null
    rentalChairs?: number | null
    questions?: string | null
    eventId?: string | null
    createdAt?: Date | string
  }

  export type StallApplicationCreateOrConnectWithoutAdminNotesInput = {
    where: StallApplicationWhereUniqueInput
    create: XOR<StallApplicationCreateWithoutAdminNotesInput, StallApplicationUncheckedCreateWithoutAdminNotesInput>
  }

  export type PerformerApplicationCreateWithoutAdminNotesInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    performance: string
    performerCount?: number | null
    slotCount?: number | null
    vehicleCount?: number | null
    rentalAmp?: number | null
    rentalMic?: number | null
    questions?: string | null
    createdAt?: Date | string
    event?: EventCreateNestedOneWithoutPerformerApplicationsInput
  }

  export type PerformerApplicationUncheckedCreateWithoutAdminNotesInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    performance: string
    performerCount?: number | null
    slotCount?: number | null
    vehicleCount?: number | null
    rentalAmp?: number | null
    rentalMic?: number | null
    questions?: string | null
    eventId?: string | null
    createdAt?: Date | string
  }

  export type PerformerApplicationCreateOrConnectWithoutAdminNotesInput = {
    where: PerformerApplicationWhereUniqueInput
    create: XOR<PerformerApplicationCreateWithoutAdminNotesInput, PerformerApplicationUncheckedCreateWithoutAdminNotesInput>
  }

  export type StallApplicationUpsertWithoutAdminNotesInput = {
    update: XOR<StallApplicationUpdateWithoutAdminNotesInput, StallApplicationUncheckedUpdateWithoutAdminNotesInput>
    create: XOR<StallApplicationCreateWithoutAdminNotesInput, StallApplicationUncheckedCreateWithoutAdminNotesInput>
    where?: StallApplicationWhereInput
  }

  export type StallApplicationUpdateToOneWithWhereWithoutAdminNotesInput = {
    where?: StallApplicationWhereInput
    data: XOR<StallApplicationUpdateWithoutAdminNotesInput, StallApplicationUncheckedUpdateWithoutAdminNotesInput>
  }

  export type StallApplicationUpdateWithoutAdminNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutStallApplicationsNestedInput
  }

  export type StallApplicationUncheckedUpdateWithoutAdminNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformerApplicationUpsertWithoutAdminNotesInput = {
    update: XOR<PerformerApplicationUpdateWithoutAdminNotesInput, PerformerApplicationUncheckedUpdateWithoutAdminNotesInput>
    create: XOR<PerformerApplicationCreateWithoutAdminNotesInput, PerformerApplicationUncheckedCreateWithoutAdminNotesInput>
    where?: PerformerApplicationWhereInput
  }

  export type PerformerApplicationUpdateToOneWithWhereWithoutAdminNotesInput = {
    where?: PerformerApplicationWhereInput
    data: XOR<PerformerApplicationUpdateWithoutAdminNotesInput, PerformerApplicationUncheckedUpdateWithoutAdminNotesInput>
  }

  export type PerformerApplicationUpdateWithoutAdminNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneWithoutPerformerApplicationsNestedInput
  }

  export type PerformerApplicationUncheckedUpdateWithoutAdminNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    eventId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignupCreateManyVolunteerInput = {
    id?: string
    eventId: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
  }

  export type VolunteerTagCreateManyVolunteerInput = {
    tagId: string
  }

  export type SignupUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutSignupsNestedInput
  }

  export type SignupUncheckedUpdateWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignupUncheckedUpdateManyWithoutVolunteerInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerTagUpdateWithoutVolunteerInput = {
    tag?: TagUpdateOneRequiredWithoutVolunteerTagsNestedInput
  }

  export type VolunteerTagUncheckedUpdateWithoutVolunteerInput = {
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type VolunteerTagUncheckedUpdateManyWithoutVolunteerInput = {
    tagId?: StringFieldUpdateOperationsInput | string
  }

  export type SignupCreateManyEventInput = {
    id?: string
    volunteerId: string
    role: string
    detailsJson: string
    availability?: string | null
    freq: string
    status?: string
    memo?: string | null
    createdAt?: Date | string
  }

  export type StallApplicationCreateManyEventInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    boothType: string
    items?: string | null
    priceRangeMin?: number | null
    priceRangeMax?: number | null
    boothCount?: number | null
    tentWidth?: number | null
    tentDepth?: number | null
    tentHeight?: number | null
    vehicleCount?: number | null
    rentalTables?: number | null
    rentalChairs?: number | null
    questions?: string | null
    createdAt?: Date | string
  }

  export type PerformerApplicationCreateManyEventInput = {
    id?: string
    groupName: string
    representative: string
    address?: string | null
    email: string
    phone: string
    performance: string
    performerCount?: number | null
    slotCount?: number | null
    vehicleCount?: number | null
    rentalAmp?: number | null
    rentalMic?: number | null
    questions?: string | null
    createdAt?: Date | string
  }

  export type SignupUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    volunteer?: VolunteerUpdateOneRequiredWithoutSignupsNestedInput
  }

  export type SignupUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignupUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    volunteerId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    detailsJson?: StringFieldUpdateOperationsInput | string
    availability?: NullableStringFieldUpdateOperationsInput | string | null
    freq?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    memo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StallApplicationUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminNotes?: ApplicationNoteUpdateManyWithoutStallApplicationNestedInput
  }

  export type StallApplicationUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminNotes?: ApplicationNoteUncheckedUpdateManyWithoutStallApplicationNestedInput
  }

  export type StallApplicationUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    boothType?: StringFieldUpdateOperationsInput | string
    items?: NullableStringFieldUpdateOperationsInput | string | null
    priceRangeMin?: NullableIntFieldUpdateOperationsInput | number | null
    priceRangeMax?: NullableIntFieldUpdateOperationsInput | number | null
    boothCount?: NullableIntFieldUpdateOperationsInput | number | null
    tentWidth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentDepth?: NullableFloatFieldUpdateOperationsInput | number | null
    tentHeight?: NullableFloatFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalTables?: NullableIntFieldUpdateOperationsInput | number | null
    rentalChairs?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PerformerApplicationUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminNotes?: ApplicationNoteUpdateManyWithoutPerformerApplicationNestedInput
  }

  export type PerformerApplicationUncheckedUpdateWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminNotes?: ApplicationNoteUncheckedUpdateManyWithoutPerformerApplicationNestedInput
  }

  export type PerformerApplicationUncheckedUpdateManyWithoutEventInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupName?: StringFieldUpdateOperationsInput | string
    representative?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    performance?: StringFieldUpdateOperationsInput | string
    performerCount?: NullableIntFieldUpdateOperationsInput | number | null
    slotCount?: NullableIntFieldUpdateOperationsInput | number | null
    vehicleCount?: NullableIntFieldUpdateOperationsInput | number | null
    rentalAmp?: NullableIntFieldUpdateOperationsInput | number | null
    rentalMic?: NullableIntFieldUpdateOperationsInput | number | null
    questions?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VolunteerTagCreateManyTagInput = {
    volunteerId: string
  }

  export type VolunteerTagUpdateWithoutTagInput = {
    volunteer?: VolunteerUpdateOneRequiredWithoutVolunteerTagsNestedInput
  }

  export type VolunteerTagUncheckedUpdateWithoutTagInput = {
    volunteerId?: StringFieldUpdateOperationsInput | string
  }

  export type VolunteerTagUncheckedUpdateManyWithoutTagInput = {
    volunteerId?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationNoteCreateManyStallApplicationInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    performerApplicationId?: string | null
  }

  export type ApplicationNoteUpdateWithoutStallApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerApplication?: PerformerApplicationUpdateOneWithoutAdminNotesNestedInput
  }

  export type ApplicationNoteUncheckedUpdateWithoutStallApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerApplicationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationNoteUncheckedUpdateManyWithoutStallApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performerApplicationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationNoteCreateManyPerformerApplicationInput = {
    id?: string
    content: string
    adminName: string
    createdAt?: Date | string
    stallApplicationId?: string | null
  }

  export type ApplicationNoteUpdateWithoutPerformerApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stallApplication?: StallApplicationUpdateOneWithoutAdminNotesNestedInput
  }

  export type ApplicationNoteUncheckedUpdateWithoutPerformerApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stallApplicationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationNoteUncheckedUpdateManyWithoutPerformerApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    adminName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stallApplicationId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use VolunteerCountOutputTypeDefaultArgs instead
     */
    export type VolunteerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VolunteerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StallApplicationCountOutputTypeDefaultArgs instead
     */
    export type StallApplicationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StallApplicationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PerformerApplicationCountOutputTypeDefaultArgs instead
     */
    export type PerformerApplicationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PerformerApplicationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VolunteerDefaultArgs instead
     */
    export type VolunteerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VolunteerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SignupDefaultArgs instead
     */
    export type SignupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SignupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VolunteerTagDefaultArgs instead
     */
    export type VolunteerTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VolunteerTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StallApplicationDefaultArgs instead
     */
    export type StallApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StallApplicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PerformerApplicationDefaultArgs instead
     */
    export type PerformerApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PerformerApplicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicationNoteDefaultArgs instead
     */
    export type ApplicationNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicationNoteDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}